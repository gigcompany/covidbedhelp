/*
 * Author       : covidhospitalhelpdesk
 * Generated on : 11-May-2021 15:22:53
 * Version      : 1.0
 */
 application "Chennai COVID Hospital Help"
 {
 	date format = "dd-MMM-yyyy"
 	time zone = "Asia/Kolkata"
 	time format = "24-hr"
	section Bed_Requests
	{
		displayname= "Bed Requests"
		icon = "furniture-bed-side"
		form Bed_Request
		{
			displayname = "Bed Request"
			success message = "Bed Request Added Successfully"
			field alignment = left
			Basic_Information
			(
				type = section
				displayname = "Patient Details Submitted"
				visibility = true
	 			row = 1
	 			column = 0   
				width = medium
			)
			must have Patient_Name
			(
    			type = name
				displayname = "Patient Name"
     			prefix
     			(
	     			 type = prefix
	     			 displayname ="Prefix"
	     			 visibility = false
	     			 value = {"Mr.","Mrs.","Ms."}
     			) 
     			first_name
     			(
	     			 type = first_name
	     			 displayname ="Name"
     			) 
     			last_name
     			(
	     			 type = last_name
	     			 displayname ="Last Name"
	     			 visibility = false
     			) 
     			suffix
     			(
	     			 type = suffix
	     			 displayname ="Suffix"
	     			 visibility = false
     			) 
	 			row = 1
	 			column = 1   
				width = large
				personal data = true
			)
			must have Patient_Age
			(
				type = number
				displayname = "Patient Age"
				maxchar = 3
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Primary_Phone
			(
    			type = phonenumber
				displayname = "Attender Phone"
	 			row = 1
	 			column = 1   
				width = medium
				personal data = true
			)
			must have SpO2_Reading
			(
    			type = text
				displayname = "SpO2 Reading"
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Currently_At
			(
				type = radiobuttons
				displayname = "Currently At"
				values = {"Home", "Hospital"}
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Patient_s_Address
			(
    			type = textarea
				displayname = "Patient's Locality / Address"
				height = 100px
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Type_of_Bed_Needed
			(
				type = picklist
				displayname = "Type of Bed Needed"
				values = {"Normal Bed", "Oxygen Bed", "ICU/Ventilator"}
				sortorder = ascending
    			description
    			[
    				type = tooltip
    			 	message = "Choose the right kid of bed you need for us to be able to help you better."
    			]
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Request_Date
			(
    			type = date
				displayname = "Request Date"
				initial value = "${zoho.currentdate}"
				alloweddays = 0,1,2,3,4,5,6
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Request_Time
			(
    			type = time
				displayname = "Request Time"
				initial value = "17:56:00"	
				timedisplayoptions = "hh:mm" 
	 			row = 1
	 			column = 1   
				width = medium
			)
			Request_Number
			(
    			type = autonumber
				displayname = "Request Number"
				start index = 1
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Gender
			(
				type = radiobuttons
				values = {"Male", "Female", "Others"}
	 			row = 1
	 			column = 2   
				width = medium
			)
			must have Attender_Name
			(
    			type = name
				displayname = "Attender Name"
     			prefix1
     			(
	     			 type = prefix
	     			 displayname ="Prefix"
	     			 visibility = false
	     			 value = {"Mr.","Mrs.","Ms."}
     			) 
     			first_name1
     			(
	     			 type = first_name
	     			 displayname ="Name"
     			) 
     			last_name1
     			(
	     			 type = last_name
	     			 displayname ="Last Name"
	     			 visibility = false
     			) 
     			suffix1
     			(
	     			 type = suffix
	     			 displayname ="Suffix"
	     			 visibility = false
     			) 
	 			row = 1
	 			column = 2   
				width = large
				personal data = true
			)
			Primary_Email
			(
    			type = email
				displayname = "Attender Email"
	 			row = 1
	 			column = 2   
				width = medium
				personal data = true
			)
			must have RT_PCR_Results
			(
				type = radiobuttons
				displayname = "RT-PCR Results"
				values = {"Positive", "Negative", "Test Not Done"}
	 			row = 1
	 			column = 2   
				width = medium
			)
			Chest_CT_Score
			(
    			type = text
				displayname = "Chest CT Score"
	 			row = 1
	 			column = 2   
				width = medium
			)
			Current_Hospital
			(
    			type = text
				displayname = "Current Hospital"
    			description
    			[
    				type = none
    			 	message = "If you are currently in a hospital, mention the hospital name."
    			]
	 			row = 1
	 			column = 2   
				width = medium
			)
			must have Pincode
			(
				type = number
				maxchar = 6
    			description
    			[
    				type = none
    			 	message = "The pin code around which you need hospital bed for the patient."
    			]
	 			row = 1
	 			column = 2   
				width = medium
			)
			Other_Remarks
			(
    			type = textarea
				displayname = "Other Remarks"
				height = 100px
	 			row = 1
	 			column = 2   
				width = medium
			)
			Assignment_Info
			(
				type = section
				displayname = "Status Update"
				visibility = true
	 			row = 2
	 			column = 0   
				width = medium
			)
			Triage_Team
			(
				type = picklist
				displayname = "Triage Team"
				values  = Triage_Team.ID
    			displayformat = [" " + Name.first_name + " " + Name.last_name]
				allow new entries = true
				[
					displayname = "Add New Triage Member"
				]
				sortorder = ascending
	 			row = 2
	 			column = 1   
				width = medium
			)
			must have Request_Status
			(
				type = picklist
				displayname = "Request Status"
				values = {"New", "Triage Assigned", "Volunteer Assigned", "Searching for Hospitals", "Bed Assigned", "Hospitalised", "Attender Not Reachable", "Needs to Shift to New Hospital", "Invalid / Duplicate Request", "Bed Request Cancelled"}
	 			row = 2
	 			column = 1   
				width = medium
			)
			Status_Message
			(
    			type = textarea
				displayname = "Current Status of Hospital Search"
				height = 100px
    			description
    			[
    				type = help_text
    			 	message = "Keep updating even small updates you get. Remember, the attender can see this through his tracker."
    			]
	 			row = 2
	 			column = 1   
				width = large
			)
			Volunteers
			(
				type = list
				values  = Volunteers.ID
    			displayformat = [" " + Volunteer_Name.first_name + " " + Volunteer_Name.last_name + " " + Phone_Number]
				allow new entries = true
				[
					displayname = "Add New Volunteer"
				]
				sortorder = ascending
				height = 60px
	 			row = 2
	 			column = 2   
				width = medium
			)
			Cancelled_Reason
			(
				type = picklist
				displayname = "Cancelled Reason"
				values = {"Reason Not Given", "Patient Passed Away", "Admitted Else Where"}
				others option = true
	 			row = 2
	 			column = 2   
				width = medium
			)
			Hospital_Details
			(
				type = section
				displayname = "Hospital Details"
				visibility = true
	 			row = 3
	 			column = 0   
				width = medium
			)
			Hospital_Name
			(
    			type = text
				displayname = "Hospital Name"
	 			row = 3
	 			column = 1   
				width = medium
			)
			Assigned_Time
			(
    			type = datetime
				displayname = "Assigned Time"
				timedisplayoptions = "hh:mm:ss"
				alloweddays = 0,1,2,3,4,5,6
	 			row = 3
	 			column = 1   
				width = medium
			)
			Hospital_Location
			(
    			type = text
				displayname = "Hospital Location"
	 			row = 3
	 			column = 2   
				width = medium
			)
			Section
			(
				type = section
	 			row = 4
	 			column = 0   
				width = medium
			)
			Triage_Team_Assigned_Time
			(
    			type = datetime
				displayname = "Triage Team Assigned Time"
				timedisplayoptions = "hh:mm:ss"
				alloweddays = 0,1,2,3,4,5,6
				private = true
	 			row = 4
	 			column = 1   
				width = medium
			)
			Volunteers_Assigned_Time
			(
    			type = datetime
				displayname = "Volunteers Assigned Time"
				timedisplayoptions = "hh:mm:ss"
				alloweddays = 0,1,2,3,4,5,6
				private = true
	 			row = 4
	 			column = 1   
				width = medium
			)
			Hospitalized_Time
			(
    			type = datetime
				displayname = "Hospitalized Time"
				timedisplayoptions = "hh:mm:ss"
				alloweddays = 0,1,2,3,4,5,6
				private = true
	 			row = 4
	 			column = 1   
				width = medium
			)
			Triage_Member_Email_Id
			(
    			type = text
				displayname = "Triage Member Email Id"
				private = true
	 			row = 4
	 			column = 1   
				width = medium
			)
			Volunteer_Email_Ids
			(
    			type = text
				displayname = "Volunteer Email Ids"
				private = true
	 			row = 4
	 			column = 1   
				width = medium
			)
			Volunteer_Slack_Sent
			(
    			type = text
				displayname = "Volunteer Slack Sent"
				private = true
	 			row = 4
	 			column = 1   
				width = medium
			)
			Slack_Message
			(
    			type = textarea
				displayname = "Slack Message"
				height = 100px
				private = true
	 			row = 4
	 			column = 1   
				width = medium
			)
			Slack_Status
			(
    			type = text
				displayname = "Slack Status"
				private = true
	 			row = 4
	 			column = 1   
				width = medium
			)
			Closure_Time
			(
    			type = text
				displayname = "Closure Time"
				private = true
	 			row = 4
	 			column = 1   
				width = medium
			)
			Patient_Details
			(
				type = section
				displayname = "Additional Patient Details"
				visibility = true
	 			row = 5
	 			column = 0   
				width = medium
			)
			COVID_Since
			(
    			type = date
				displayname = "COVID+ Since"
				alloweddays = 0,1,2,3,4,5,6
	 			row = 5
	 			column = 1   
				width = medium
			)
			Consulting_Dr_Name
			(
    			type = text
				displayname = "Consulting Dr Name"
	 			row = 5
	 			column = 1   
				width = medium
			)
			Criticality
			(
				type = picklist
				values = {"Low", "Medium", "High", "Critical"}
	 			row = 5
	 			column = 1   
				width = medium
			)
			Comorbidities
			(
    			type = textarea
				height = 100px
	 			row = 5
	 			column = 2   
				width = medium
			)
			Consulting_Dr_Phone
			(
    			type = phonenumber
				displayname = "Consulting Dr Phone"
	 			row = 5
	 			column = 2   
				width = medium
				personal data = true
			)
			Additional_Information
			(
    			type = textarea
				displayname = "Additional Information"
				height = 100px
	 			row = 5
	 			column = 2   
				width = medium
			)
			Patient_Medical_Details
			(
				type = grid
				displayname = "Patient Medical Details"
				RT_PCR_Test_Score
				(
    				type = text
					displayname = "RT PCR Test Score"
					width = medium
				)
				CT_Scan_Score
				(
    				type = text
					displayname = "CT Scan Score"
					width = medium
				)
				SPO2_Level
				(
    				type = text
					displayname = "SPO2 Level"
					width = medium
				)
				On_Oxygen_Support
				(
					type = radiobuttons
					displayname = "On Oxygen Support?"
					values = {"Yes", "No"}
					width = medium
				)
				Data_Recorded_On
				(
    				type = datetime
					displayname = "Data Recorded On"
					timedisplayoptions = "hh:mm:ss"
					alloweddays = 0,1,2,3,4,5,6
					width = medium
				)
	 			row = 6
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "ui-2-fat-add"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		print template
			{
				New_Request_For_Triage
				{
						displayname = "New Request For Triage"
						content = {"pageNumberOption":null,"orientation":"null","images":[{"fileName":"","imageId":"","imageType":"","fileId":""}],"isFooterEnabled":false,"containerStyle":"","templateStyle":"text-align: left; width: 793.7px; margin: 0px auto; padding: 30px","version":"2","layout":"1","mainLayout":[{"elements":[{"type":"columns","element":{"split":"100","id":"u_elem_14729069575000001","elemStyle":"","collayouts":[{"colElements":[{"type":"text","element":{"id":"u_elem_14729069470000003","fields":[],"content":"<div style=\"\"><br /><br /><\/div>"}}]}]}},{"type":"columns","element":{"split":"100","id":"u_elem_14729069825","elemStyle":"","collayouts":[{"colElements":[{"type":"text","element":{"id":"u_elem_14729069745000001","fields":[],"content":"<div style=\"\" spellcheck=\"false\"><h1 style=\"text-align: center\"><font color=\"#51b46e\">We have a new bed request that needs attention<\/font><\/h1><\/div>"}}]}]}},{"type":"columns","element":{"split":"100","id":"u_elem_14729070534999998","elemStyle":"","collayouts":[{"colElements":[{"type":"text","element":{"id":"u_elem_14729070254999999","fields":[],"content":"<div style=\"\"><br /><\/div>"}}]}]}},{"type":"columns","element":{"split":"100","id":"u_elem_14729073805","elemStyle":"","collayouts":[{"colElements":[{"type":"text","element":{"id":"u_elem_14729070905000001","fields":[],"content":"<div style=\"\"><p style=\"text-align: center\"><font size=\"3\">Please find below the details<\/font><\/p><\/div>"}}]}]}},{"type":"columns","element":{"split":"100","id":"u_elem_14729074254999999","elemStyle":"","collayouts":[{"colElements":[{"type":"text","element":{"id":"u_elem_14729074125","fields":[],"content":"<div style=\"\"><br /><br /><\/div>"}}]}]}},{"type":"columns","element":{"split":"100","id":"u_elem_14729094189999996","elemStyle":"","collayouts":[{"colElements":[{"id":"u_elem_86232661700749623","type":"fields","element":{"valueStyle":"width: 50%","valueTextStyle":"font-size: 14px; font-weight: bold","fieldLayoutType":"2","labelText":"Patient Name","wrapperStyle":"","labelStyle":"width: 50%","Label_Name":"Patient_Name","labelTextStyle":"","compFields":["prefix","first_name","last_name","suffix"]}}]}]}},{"type":"columns","element":{"split":"100","id":"u_elem_15040089074999996","elemStyle":"","collayouts":[{"colElements":[{"id":"u_elem_86232661700758794","type":"fields","element":{"valueStyle":"width: 50%","valueTextStyle":"font-size: 14px; font-weight: bold","fieldLayoutType":"2","labelText":"Patient Age","wrapperStyle":"","labelStyle":"width: 50%","Label_Name":"Patient_Age","labelTextStyle":""}},{"id":"u_elem_86232661700761028","type":"fields","element":{"valueStyle":"width: 50%","valueTextStyle":"font-size: 14px; font-weight: bold","fieldLayoutType":"2","labelText":"Request Date","wrapperStyle":"","labelStyle":"width: 50%","Label_Name":"Request_Date","labelTextStyle":""}}]}]}},{"type":"columns","element":{"split":"100","id":"u_elem_15068397660000002","elemStyle":"","collayouts":[{"colElements":[{"id":"u_elem_86232661700764696","type":"fields","element":{"valueStyle":"width: 50%","valueTextStyle":"font-size: 14px; font-weight: bold","fieldLayoutType":"2","labelText":"Request Time","wrapperStyle":"","labelStyle":"width: 50%","Label_Name":"Request_Time","labelTextStyle":""}},{"id":"u_elem_86232661700766638","type":"fields","element":{"valueStyle":"width: 50%","valueTextStyle":"font-size: 14px; font-weight: bold","fieldLayoutType":"2","labelText":"Pincode","wrapperStyle":"","labelStyle":"width: 50%","Label_Name":"Pincode","labelTextStyle":""}}]}]}},{"type":"columns","element":{"split":"100","id":"u_elem_14729094855000002","elemStyle":"","collayouts":[{"colElements":[{"type":"text","element":{"id":"u_elem_14729094649999999","fields":[],"content":"<div style=\"\"><p><span style=\"font-size: medium; letter-spacing: 0px\">Log into the Hospital Bed Assignment App and assign this request to yourself and work with a volunteer to help this patient in need.&nbsp;<\/span><br /><\/p><\/div>"}}]}]}},{"type":"columns","element":{"split":"100","id":"u_elem_14729095209999999","elemStyle":"","collayouts":[{"colElements":[{"type":"text","element":{"id":"u_elem_14729095110000001","fields":[],"content":"<div style=\"\"><br /><\/div>"}}]}]}},{"type":"columns","element":{"split":"100","id":"u_elem_14729096420000002","elemStyle":"","collayouts":[{"colElements":[{"type":"text","element":{"id":"u_elem_14729096335000003","fields":[],"content":"<div style=\"\"><p><font size=\"3\">Thank you for helping out.<\/font><\/p><\/div>"}}]}]}},{"type":"columns","element":{"split":"100","id":"u_elem_14729097555","elemStyle":"","collayouts":[{"colElements":[{"type":"spacer","element":{"id":"u_elem_6088770640000002","height":"25"}},{"type":"text","element":{"id":"u_elem_14729097025000002","fields":[],"content":"<div style=\"\"><p><font size=\"3\">-- Chennai COVID Task Force Team<\/font><\/p><\/div>"}}]}]}}],"id":1}],"resize":"A4","header":{"imageId":"","elements":[{"type":"columns","element":{"split":"23,54,23","id":"u_elem_1472903028","elemStyle":"","collayouts":[{"colElements":[{"type":"text","element":{"id":"u_elem_1472906729","fields":[],"content":"<div style=\"\"><p><br /><\/p><\/div>"}}]},{"colElements":[{"type":"columns","element":{"split":"100","id":"u_elem_1472906764","elemStyle":"","collayouts":[{"colElements":[{"type":"text","element":{"id":"u_elem_14729068789999997","fields":[],"content":"<div style=\"\"><p><br /><\/p><\/div>"}}]}]}}]},{"colElements":[{"type":"text","element":{"id":"u_elem_14729068910000002","fields":[],"content":"<div style=\"\"><p><br /><\/p><\/div>"}}]}]}}],"style":"border-color: rgb(255, 255, 255); background-color: rgb(255, 255, 255)","bgImg":""},"themeFont":"ntent-wrapper builderContent builder_body_outer_wrapper recordSummarybuilder","isHeaderEnabled":true}
				}
			}
		}
		list Untriaged_Requests
		{
			displayName = "Untriaged Requests"
			show all rows from Bed_Request  [Triage_Team.ID is null]  
			(
				Patient_Name  as "Patient Name"
	 			(
	      			displayformat = [first_name]
	 			)
				Attender_Name  as "Attender Name"
	 			(
	      			displayformat = [first_name1+""+prefix1+""+last_name1+""+suffix1]
	 			)
				Primary_Phone as "Attender Phone"
				(
					displayformat = plainnumber 
					linktodial = enable
				)
				Primary_Email as "Attender Email"
				Patient_Age as "Patient Age"
				Pincode
				Type_of_Bed_Needed as "Type of Bed Needed"
				Triage_Team as "Triage Team"
				Triage_Team_Assigned_Time as "Triage Team Assigned Time"
				Volunteers
				Volunteers_Assigned_Time as "Volunteers Assigned Time"
				Request_Status as "Request Status"
				Request_Date as "Request Date"
				Request_Time as "Request Time"
				Request_Number as "Request Number"
			)
			sort by
			(
				Request_Number descending
			)
			options
			(
				icon = "arrows-2-file-download-87"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Request_Number as "Request Number"
							Patient_Name as "Patient Name"
							Type_of_Bed_Needed as "Type of Bed Needed"
							Pincode
							Request_Date as "Request Date"
							Request_Time as "Request Time"
							Attender_Name as "Attender Name"
							Primary_Phone as "Attender Phone"
							Primary_Email as "Attender Email"
							Patient_Age as "Patient Age"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    	 			)
							record
							(
								Edit   	   
    						)
    			)
    			action
    			(
							on click
							(
								Edit   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Patient_Name as "Patient Name"
							Attender_Name as "Attender Name"
							Primary_Phone as "Attender Phone"
							Primary_Email as "Attender Email"
							Patient_Age as "Patient Age"
							Pincode
							Type_of_Bed_Needed as "Type of Bed Needed"
							Triage_Team as "Triage Team"
							Triage_Team_Assigned_Time as "Triage Team Assigned Time"
							Volunteers
							Volunteers_Assigned_Time as "Volunteers Assigned Time"
							Request_Status as "Request Status"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
		custom My_Triages
		{
			displayName = "My Triages & Requests"
			show all rows from Bed_Request  [Triage_Member_Email_Id == zoho.loginuserid || Volunteer_Email_Ids.contains(zoho.loginuserid)]  
			(
				Patient_Name  as "Patient Name"
	 			(
	      			displayformat = [first_name]
	 			)
				Primary_Phone as "Attender Phone"
				(
					displayformat = plainnumber 
					linktodial = enable
				)
				Primary_Email as "Attender Email"
				Attender_Name  as "Attender Name"
	 			(
	      			displayformat = [first_name1+""+prefix1+""+last_name1+""+suffix1]
	 			)
				Patient_Age as "Patient Age"
				Type_of_Bed_Needed as "Type of Bed Needed"
				Pincode
				Triage_Team as "Triage Team"
				Triage_Team_Assigned_Time as "Triage Team Assigned Time"
				Volunteers
				Volunteers_Assigned_Time as "Volunteers Assigned Time"
				Request_Status as "Request Status"
				Request_Number as "Request Number"
				Triage_Member_Email_Id as "Triage Member Email Id"
				Volunteer_Email_Ids as "Volunteer Email Ids"
				Patient_Medical_Details.RT_PCR_Test_Score as "Patient Medical Details"
				COVID_Since as "COVID+ Since"
				Comorbidities
				Consulting_Dr_Name as "Consulting Dr Name"
				Consulting_Dr_Phone as "Consulting Dr Phone"
				(
					displayformat = plainnumber 
					linktodial = enable
				)
				Patient_s_Address as "Patient's Locality / Address"
				Criticality
			)
			options
			(
				icon = "users-man-23"
	 		)
			conditional formatting
			(
				"New Formatting"
				{
				condition = (Criticality == "Critical")
				fields = [Criticality]
				format = "color:#ffffff;background-color:#e84c3d;"
				}
				"New Formatting"
				{
				condition = (Criticality == "High")
				fields = [Criticality]
				format = "color:#333;background-color:#f1c40f;"
				}
				"New Formatting"
				{
				condition = (Criticality == "Medium")
				fields = [Criticality]
				format = "color:#333;background-color:#fffd8a;"
				}
			)
			quickview
			(
				layout
				(
		 			type = 2
					datablock1
					(
			 			layout type = 4
		     			title = "Overview"
						fields
						(
							Patient_Name as "Patient Name"
							Request_Status as "Request Status"
							Criticality
							COVID_Since as "COVID+ Since"
							Type_of_Bed_Needed as "Type of Bed Needed"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    	 			)
    			)
    			action
    			(
							on click
							(
								Edit   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Patient_Name as "Patient Name"
							Primary_Phone as "Attender Phone"
							Primary_Email as "Attender Email"
							Attender_Name as "Attender Name"
							Patient_Age as "Patient Age"
							Type_of_Bed_Needed as "Type of Bed Needed"
							Pincode
							Triage_Team as "Triage Team"
							Triage_Team_Assigned_Time as "Triage Team Assigned Time"
							Volunteers
							Volunteers_Assigned_Time as "Volunteers Assigned Time"
							Request_Status as "Request Status"
							Request_Number as "Request Number"
							Triage_Member_Email_Id as "Triage Member Email Id"
							Volunteer_Email_Ids as "Volunteer Email Ids"
							Patient_Medical_Details.RT_PCR_Test_Score as "Patient Medical Details"
							COVID_Since as "COVID+ Since"
							Comorbidities
							Consulting_Dr_Name as "Consulting Dr Name"
							Consulting_Dr_Phone as "Consulting Dr Phone"
							Patient_s_Address as "Patient's Locality / Address"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
		custom My_Requests
		{
			displayName = "My Requests"
			show all rows from Bed_Request  [Volunteer_Email_Ids.contains(zoho.loginuserid)]  
			(
				Patient_Name  as "Patient Name"
	 			(
	      			displayformat = [first_name+""+prefix+""+last_name+""+suffix]
	 			)
				Primary_Phone as "Attender Phone"
				(
					displayformat = plainnumber 
					linktodial = enable
				)
				Primary_Email as "Attender Email"
				Attender_Name  as "Attender Name"
	 			(
	      			displayformat = [first_name1+""+prefix1+""+last_name1+""+suffix1]
	 			)
				Patient_Age as "Patient Age"
				Type_of_Bed_Needed as "Type of Bed Needed"
				Pincode
				Triage_Team as "Triage Team"
				Triage_Team_Assigned_Time as "Triage Team Assigned Time"
				Volunteers
				Volunteers_Assigned_Time as "Volunteers Assigned Time"
				Request_Status as "Request Status"
				Request_Number as "Request Number"
				Triage_Member_Email_Id as "Triage Member Email Id"
				Volunteer_Email_Ids as "Volunteer Email Ids"
				Patient_Medical_Details.RT_PCR_Test_Score as "Patient Medical Details"
				COVID_Since as "COVID+ Since"
				Comorbidities
				Consulting_Dr_Name as "Consulting Dr Name"
				Consulting_Dr_Phone as "Consulting Dr Phone"
				(
					displayformat = plainnumber 
					linktodial = enable
				)
				Patient_s_Address as "Patient's Locality / Address"
				Criticality
			)
			options
			(
				icon = "users-man-23"
	 		)
			conditional formatting
			(
				"New Formatting"
				{
				condition = (Criticality == "Critical")
				fields = [Criticality]
				format = "color:#ffffff;background-color:#e84c3d;"
				}
				"New Formatting"
				{
				condition = (Criticality == "High")
				fields = [Criticality]
				format = "color:#333;background-color:#efb116;"
				}
				"New Formatting"
				{
				condition = (Criticality == "Medium")
				fields = [Criticality]
				format = "color:#333;background-color:#fffd8a;"
				}
			)
			quickview
			(
				layout
				(
		 			type = 2
					datablock1
					(
			 			layout type = 4
		     			title = "Overview"
						fields
						(
							Patient_Name as "Patient Name"
							Request_Status as "Request Status"
							Criticality
							COVID_Since as "COVID+ Since"
							Type_of_Bed_Needed as "Type of Bed Needed"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								Edit   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Patient_Name as "Patient Name"
							Primary_Phone as "Attender Phone"
							Primary_Email as "Attender Email"
							Attender_Name as "Attender Name"
							Patient_Age as "Patient Age"
							Type_of_Bed_Needed as "Type of Bed Needed"
							Pincode
							Triage_Team as "Triage Team"
							Triage_Team_Assigned_Time as "Triage Team Assigned Time"
							Volunteers
							Volunteers_Assigned_Time as "Volunteers Assigned Time"
							Request_Status as "Request Status"
							Request_Number as "Request Number"
							Triage_Member_Email_Id as "Triage Member Email Id"
							Volunteer_Email_Ids as "Volunteer Email Ids"
							Patient_Medical_Details.RT_PCR_Test_Score as "Patient Medical Details"
							COVID_Since as "COVID+ Since"
							Comorbidities
							Consulting_Dr_Name as "Consulting Dr Name"
							Consulting_Dr_Phone as "Consulting Dr Phone"
							Patient_s_Address as "Patient's Locality / Address"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
		kanban Bed_Requests_by_Criticality
		{
			displayName = "Bed Requests by Criticality"
			show all rows from Bed_Request    
			(
				Patient_Name  as "Patient Name"
	 			(
	      			displayformat = [first_name+""+prefix+""+last_name+""+suffix]
	 			)
				Patient_Age as "Patient Age"
				Primary_Phone as "Attender Phone"
				(
					displayformat = plainnumber 
					linktodial = enable
				)
				Attender_Name  as "Attender Name"
	 			(
	      			displayformat = [first_name1+""+prefix1+""+last_name1+""+suffix1]
	 			)
				Currently_At as "Currently At"
				Patient_s_Address as "Patient's Locality / Address"
				Type_of_Bed_Needed as "Type of Bed Needed"
				Request_Date as "Request Date"
				Request_Time as "Request Time"
				Request_Number as "Request Number"
				Gender
				Primary_Email as "Attender Email"
				RT_PCR_Results as "RT-PCR Results"
				Current_Hospital as "Current Hospital"
				Pincode
				Request_Status as "Request Status"
				Triage_Team as "Triage Team"
				Status_Message as "Current Status of Hospital Search"
				Volunteers
				Triage_Team_Assigned_Time as "Triage Team Assigned Time"
				Volunteers_Assigned_Time as "Volunteers Assigned Time"
				Triage_Member_Email_Id as "Triage Member Email Id"
				Volunteer_Email_Ids as "Volunteer Email Ids"
				Volunteer_Slack_Sent as "Volunteer Slack Sent"
				COVID_Since as "COVID+ Since"
				Consulting_Dr_Name as "Consulting Dr Name"
				Criticality
				Comorbidities
				Consulting_Dr_Phone as "Consulting Dr Phone"
				(
					displayformat = plainnumber 
					linktodial = enable
				)
				Hospital_Name as "Hospital Name"
				Assigned_Time as "Assigned Time"
				Hospital_Location as "Hospital Location"
			)
			options
			(
	 			display field = Criticality
				icon = "shopping-pos"
	 		)
			quickview
			(
				layout
				(
		 			type = 2
					datablock1
					(
			 			layout type = 4
		     			title = "Overview"
						fields
						(
							Patient_Name as "Patient Name"
							Request_Status as "Request Status"
							COVID_Since as "COVID+ Since"
							Type_of_Bed_Needed as "Type of Bed Needed"
							Pincode
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    	 			)
    			)
    			action
    			(
							on click
							(
								Edit   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Patient_Name as "Patient Name"
							Patient_Age as "Patient Age"
							Primary_Phone as "Attender Phone"
							Attender_Name as "Attender Name"
							Currently_At as "Currently At"
							Patient_s_Address as "Patient's Locality / Address"
							Type_of_Bed_Needed as "Type of Bed Needed"
							Request_Date as "Request Date"
							Request_Time as "Request Time"
							Request_Number as "Request Number"
							Gender
							Primary_Email as "Attender Email"
							RT_PCR_Results as "RT-PCR Results"
							Current_Hospital as "Current Hospital"
							Pincode
							Request_Status as "Request Status"
							Triage_Team as "Triage Team"
							Status_Message as "Current Status of Hospital Search"
							Volunteers
							Triage_Team_Assigned_Time as "Triage Team Assigned Time"
							Volunteers_Assigned_Time as "Volunteers Assigned Time"
							Triage_Member_Email_Id as "Triage Member Email Id"
							Volunteer_Email_Ids as "Volunteer Email Ids"
							Volunteer_Slack_Sent as "Volunteer Slack Sent"
							COVID_Since as "COVID+ Since"
							Consulting_Dr_Name as "Consulting Dr Name"
							Criticality
							Comorbidities
							Consulting_Dr_Phone as "Consulting Dr Phone"
							Hospital_Name as "Hospital Name"
							Assigned_Time as "Assigned Time"
							Hospital_Location as "Hospital Location"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
		kanban Bed_Requests_By_Status
		{
			displayName = "Bed Requests By Status"
			show all rows from Bed_Request    
			(
				Patient_Name  as "Patient Name"
	 			(
	      			displayformat = [first_name+""+prefix+""+last_name+""+suffix]
	 			)
				Attender_Name  as "Attender Name"
	 			(
	      			displayformat = [first_name1+""+last_name1]
	 			)
				Primary_Phone as "Attender Phone"
				(
					displayformat = plainnumber 
					linktodial = enable
				)
				Primary_Email as "Attender Email"
				Patient_Age as "Patient Age"
				Pincode
				Type_of_Bed_Needed as "Type of Bed Needed"
				Triage_Team as "Triage Team"
				Triage_Team_Assigned_Time as "Triage Team Assigned Time"
				Volunteers
				Volunteers_Assigned_Time as "Volunteers Assigned Time"
				Request_Status as "Request Status"
				Criticality
			)
			options
			(
	 			display field = Request_Status
				icon = "shopping-tag-sale"
	 		)
			conditional formatting
			(
				"New Formatting"
				{
				condition = (Criticality == "Critical")
				fields = [Criticality]
				format = "color:#ffffff;background-color:#e84c3d;"
				}
				"New Formatting"
				{
				condition = (Criticality == "High")
				fields = [Criticality]
				format = "color:#333;background-color:#f1c40f;"
				}
				"New Formatting"
				{
				condition = (Criticality == "Medium")
				fields = [Criticality]
				format = "color:#333;background-color:#fffd82;"
				}
			)
			quickview
			(
				layout
				(
		 			type = 2
					datablock1
					(
			 			layout type = 4
		     			title = "Overview"
						fields
						(
							Patient_Name as "Patient Name"
							Request_Status as "Request Status"
							Criticality
							Type_of_Bed_Needed as "Type of Bed Needed"
							Pincode
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    	 			)
    			)
    			action
    			(
							on click
							(
								Edit   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Patient_Name as "Patient Name"
							Attender_Name as "Attender Name"
							Primary_Phone as "Attender Phone"
							Primary_Email as "Attender Email"
							Patient_Age as "Patient Age"
							Pincode
							Type_of_Bed_Needed as "Type of Bed Needed"
							Triage_Team as "Triage Team"
							Triage_Team_Assigned_Time as "Triage Team Assigned Time"
							Volunteers
							Volunteers_Assigned_Time as "Volunteers Assigned Time"
							Request_Status as "Request Status"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
		default list All_Bed_Requests
		{
			displayName = "All Bed Requests"
			show all rows from Bed_Request    
			(
				Patient_Name  as "Patient Name"
	 			(
	      			displayformat = [first_name]
	 			)
				Primary_Phone as "Attender Phone"
				(
					displayformat = plainnumber 
					linktodial = enable
				)
				Primary_Email as "Attender Email"
				Attender_Name  as "Attender Name"
	 			(
	      			displayformat = [first_name1+""+prefix1+""+last_name1+""+suffix1]
	 			)
				Patient_Age as "Patient Age"
				Type_of_Bed_Needed as "Type of Bed Needed"
				Pincode
				Triage_Team as "Triage Team"
				Triage_Team_Assigned_Time as "Triage Team Assigned Time"
				Volunteers
				Volunteers_Assigned_Time as "Volunteers Assigned Time"
				Request_Status as "Request Status"
				Request_Number as "Request Number"
				Triage_Member_Email_Id as "Triage Member Email Id"
				Volunteer_Email_Ids as "Volunteer Email Ids"
				Patient_Medical_Details.RT_PCR_Test_Score as "Patient Medical Details"
				COVID_Since as "COVID+ Since"
				Comorbidities
				Consulting_Dr_Name as "Consulting Dr Name"
				Consulting_Dr_Phone as "Consulting Dr Phone"
				(
					displayformat = plainnumber 
					linktodial = enable
				)
				Patient_s_Address as "Patient's Locality / Address"
				Request_Date as "Request Date"
				Request_Time as "Request Time"
				Hospital_Name as "Hospital Name"
				Assigned_Time as "Assigned Time"
				Hospital_Location as "Hospital Location"
				Gender
				Currently_At as "Currently At"
				Current_Hospital as "Current Hospital"
				Volunteer_Slack_Sent as "Volunteer Slack Sent"
				Status_Message as "Current Status of Hospital Search"
				RT_PCR_Results as "RT-PCR Results"
				Criticality
				Cancelled_Reason as "Cancelled Reason"
				Additional_Information as "Additional Information"
				Chest_CT_Score as "Chest CT Score"
				SpO2_Reading as "SpO2 Reading"
				Other_Remarks as "Other Remarks"
				Slack_Message as "Slack Message"
				Slack_Status as "Slack Status"
				Closure_Time as "Closure Time"
				Hospitalized_Time as "Hospitalized Time"
			)
			sort by
			(
				Request_Number descending
			)
			options
			(
				icon = "furniture-bed-09"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Request_Number as "Request Number"
							Patient_Name as "Patient Name"
							Request_Status as "Request Status"
							Criticality
							RT_PCR_Results as "RT-PCR Results"
							Type_of_Bed_Needed as "Type of Bed Needed"
							Patient_Age as "Patient Age"
							Primary_Phone as "Attender Phone"
							Primary_Email as "Attender Email"
							Request_Date as "Request Date"
							Request_Time as "Request Time"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    	 			)
    			)
    			action
    			(
							on click
							(
								Edit   	   
    						)
							on right click
							(
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Patient_Name as "Patient Name"
							Primary_Phone as "Attender Phone"
							Primary_Email as "Attender Email"
							Attender_Name as "Attender Name"
							Patient_Age as "Patient Age"
							Type_of_Bed_Needed as "Type of Bed Needed"
							Pincode
							Triage_Team as "Triage Team"
							Triage_Team_Assigned_Time as "Triage Team Assigned Time"
							Volunteers
							Volunteers_Assigned_Time as "Volunteers Assigned Time"
							Request_Status as "Request Status"
							Request_Number as "Request Number"
							Triage_Member_Email_Id as "Triage Member Email Id"
							Volunteer_Email_Ids as "Volunteer Email Ids"
							Patient_Medical_Details.RT_PCR_Test_Score as "Patient Medical Details"
							COVID_Since as "COVID+ Since"
							Comorbidities
							Consulting_Dr_Name as "Consulting Dr Name"
							Consulting_Dr_Phone as "Consulting Dr Phone"
							Patient_s_Address as "Patient's Locality / Address"
							Request_Date as "Request Date"
							Request_Time as "Request Time"
							Hospital_Name as "Hospital Name"
							Assigned_Time as "Assigned Time"
							Hospital_Location as "Hospital Location"
							Gender
							Currently_At as "Currently At"
							Current_Hospital as "Current Hospital"
							Volunteer_Slack_Sent as "Volunteer Slack Sent"
							Status_Message as "Current Status of Hospital Search"
							RT_PCR_Results as "RT-PCR Results"
							Criticality
							Cancelled_Reason as "Cancelled Reason"
							Additional_Information as "Additional Information"
							Chest_CT_Score as "Chest CT Score"
							SpO2_Reading as "SpO2 Reading"
							Other_Remarks as "Other Remarks"
							Slack_Message as "Slack Message"
							Slack_Status as "Slack Status"
							Closure_Time as "Closure Time"
							Hospitalized_Time as "Hospitalized Time"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
	}
	section Dashboard
	{
		icon = "ui-1-dashboard-half"
				 page Dashboard 
	 	 { 
 	 	 displayname = "Dashboard" 

 	 	 icon = "ui-1-dashboard-half" 
	 	 Content="<zml    \n\t\t\tisPdfEnabled='false'\n\t\t\n\t\t\tisPrintEnabled='false'\n\t\t\n\t\t\n\t\t\n\t\t\n>\n\t<layout>\n\t<row>\n\t<column\n   \t\t width=\"34%\"\n   \t>\n\t<panel \n >\n\t<pr \n\t\t\twidth='fill'\n\t\theight='fill'\n>\n\t<pc \n\t\t\twidth = '100%'\n>\n\t<pr \n\t\t\twidth='fill'\n\t\theight='fill'\n>\n\t<pc \n\t\tpadding = '20px'\n\tbgColor = '#FFFFFF'\n\t\twidth = '100%'\n\t\thAlign = 'center'\n\t\tvAlign = 'middle'\n>\n\t<pr \n\t\t\twidth='auto'\n\t\theight='auto'\n>\n\t<pc \n\t>\n\t<pr \n\t>\n\t<pc \n\t>\n\t<text \taction = 'OpenReport'\n\tcomponentLinkName = 'Bed_Requests_By_Status'\n\ttarget = 'new-window'\n\n\tmarginTop = '5px'\n\tcolor = '#FF4C2F'\n\tsize = '33px'\n\tuppercase = 'false' \n\tunderline = 'false' \n\tbold = 'true' \n\titalic = 'false' \n\ttype = 'Form Data'\n\n\tdisplayType = 'actual'\n\n\n\t  \n\t\tcriteria = '(((((Request_Status != &quot;Invalid \/ Duplicate Request&quot;)&amp;&amp;(Request_Status != &quot;Bed Request Cancelled&quot;))&amp;&amp;(Request_Status != &quot;Hospitalised&quot;))))'\n\t  value = 'thisapp.Bed_Request.ID.count'\n>\n<\/text>\n\n<\/pc>\n<\/pr>\n<\/pc>\n<\/pr>\n<\/pc>\n<\/pr><pr \n\t\t\twidth='fill'\n\t\theight='50px'\n>\n\t<pc \n\t\tbgColor = '#FF4C2F'\n\t\twidth = '100%'\n\t\thAlign = 'center'\n\t\tvAlign = 'middle'\n>\n\t<pr \n\t\t\twidth='auto'\n\t\theight='auto'\n>\n\t<pc \n\t>\n\t<text \n\tmarginLeft = '20px'\n\tmarginRight = '20px' \n\tcolor = '#FFFFFF'\n\tsize = '16px'\n\tuppercase = 'false' \n\tunderline = 'false' \n\tbold = 'false' \n\titalic = 'false' \n\ttype = 'Text'\n\n\n\n\t  \n\t  value = 'Active Requests'\n>\n<\/text>\n\n<\/pc>\n<\/pr>\n<\/pc>\n<\/pr>\n<\/pc>\n<\/pr>\n<\/panel>\n<\/column><column\n   \t\t width=\"33%\"\n   \t>\n\t<panel \n >\n\t<pr \n\t\t\twidth='fill'\n\t\theight='fill'\n>\n\t<pc \n\t\t\twidth = '100%'\n>\n\t<pr \n\t\t\twidth='fill'\n\t\theight='fill'\n>\n\t<pc \n\t\tpadding = '20px'\n\tbgColor = '#FFFFFF'\n\t\twidth = '100%'\n\t\thAlign = 'center'\n\t\tvAlign = 'middle'\n>\n\t<pr \n\t\t\twidth='auto'\n\t\theight='auto'\n>\n\t<pc \n\t>\n\t<text \taction = 'OpenReport'\n\tcomponentLinkName = 'Untriaged_Requests'\n\ttarget = 'new-window'\n\n\tcolor = '#4C7DE8'\n\tsize = '36px'\n\tuppercase = 'false' \n\tunderline = 'false' \n\tbold = 'true' \n\titalic = 'false' \n\ttype = 'Form Data'\n\n\tdisplayType = 'actual'\n\n\n\t  \n\t\tcriteria = '(((Triage_Team.ID is null )))'\n\t  value = 'thisapp.Bed_Request.ID.count'\n>\n<\/text>\n\n<\/pc>\n<\/pr>\n<\/pc>\n<\/pr><pr \n\t\t\twidth='fill'\n\t\theight='50px'\n>\n\t<pc \n\t\tbgColor = '#286BDC'\n\t\twidth = '100%'\n\t\thAlign = 'center'\n\t\tvAlign = 'middle'\n>\n\t<pr \n\t\t\twidth='auto'\n\t\theight='auto'\n>\n\t<pc \n\t>\n\t<text \n\tmarginLeft = '20px'\n\tmarginRight = '20px' \n\tcolor = '#FFFFFF'\n\tsize = '16px'\n\tuppercase = 'false' \n\tunderline = 'false' \n\tbold = 'false' \n\titalic = 'false' \n\ttype = 'Text'\n\n\n\n\t  \n\t  value = 'Untriaged'\n>\n<\/text>\n\n<\/pc>\n<\/pr>\n<\/pc>\n<\/pr>\n<\/pc>\n<\/pr>\n<\/panel>\n<\/column><column\n   \t\t width=\"33%\"\n   \t>\n\t<panel \n >\n\t<pr \n\t\t\twidth='fill'\n\t\theight='fill'\n>\n\t<pc \n\t\t\twidth = '100%'\n>\n\t<pr \n\t\t\twidth='fill'\n\t\theight='fill'\n>\n\t<pc \n\t\tpadding = '20px'\n\tbgColor = '#FFFFFF'\n\t\twidth = '100%'\n\t\thAlign = 'center'\n\t\tvAlign = 'middle'\n>\n\t<pr \n\t\t\twidth='auto'\n\t\theight='auto'\n>\n\t<pc \n\t>\n\t<pr \n\t>\n\t<pc \n\t>\n\t<text \n\tmarginTop = '5px'\n\tcolor = '#0ABB51'\n\tsize = '33px'\n\tuppercase = 'false' \n\tunderline = 'false' \n\tbold = 'true' \n\titalic = 'false' \n\ttype = 'Form Data'\n\n\tdisplayType = 'actual'\n\n\n\t  \n\t\tcriteria = '(((Volunteers.Volunteer_Email is null )))'\n\t  value = 'thisapp.Bed_Request.ID.count'\n>\n<\/text>\n\n<\/pc>\n<\/pr>\n<\/pc>\n<\/pr>\n<\/pc>\n<\/pr><pr \n\t\t\twidth='fill'\n\t\theight='50px'\n>\n\t<pc \n\t\tbgColor = '#0ABB51'\n\t\twidth = '100%'\n\t\thAlign = 'center'\n\t\tvAlign = 'middle'\n>\n\t<pr \n\t\t\twidth='auto'\n\t\theight='auto'\n>\n\t<pc \n\t>\n\t<text \n\tmarginLeft = '20px'\n\tmarginRight = '20px' \n\tcolor = '#FFFFFF'\n\tsize = '16px'\n\tuppercase = 'false' \n\tunderline = 'false' \n\tbold = 'false' \n\titalic = 'false' \n\ttype = 'Text'\n\n\n\n\t  \n\t  value = 'Unassigned (Volunteers)'\n>\n<\/text>\n\n<\/pc>\n<\/pr>\n<\/pc>\n<\/pr>\n<\/pc>\n<\/pr>\n<\/panel>\n<\/column>\n<\/row><row>\n\t<column\n   \t\t width=\"34%\"\n   \t>\n\t<chart \n\t\n\ttitle = 'Request Trends'\n\t\n\t\ttitleSize = '20px'\n\ttype = 'Pie'\n\txtitle = 'Type of Bed Needed'\n\tytitle = 'Count'\n\tbgColor = 'rgb(255, 255, 255)'\n\ttheme = 'theme1'\n\tlegendPos = 'center.top'\n\tappLinkName = 'thisapp'\n\tformLinkName = 'Bed_Request'\n\txfield = 'Type_of_Bed_Needed'\n\tyfields = 'count:Request_Number'\n\timportedTemplate = 'false'\n\t\tDelugeCriteria = '(((((Request_Status != &quot;Invalid \/ Duplicate Request&quot;)&amp;&amp;(Request_Status != &quot;Bed Request Cancelled&quot;))&amp;&amp;(Request_Status != &quot;Hospitalised&quot;))))'\n\/>\n\n<\/column><column\n   \t\t width=\"33%\"\n   \t>\n\t<chart \n\t\n\ttype = 'Column'\n\txtitle = 'Hours for closure'\n\tytitle = 'Count'\n\tbgColor = 'rgb(255, 255, 255)'\n\ttheme = 'theme1'\n\tlegendPos = 'center.top'\n\tappLinkName = 'thisapp'\n\tformLinkName = 'Bed_Request'\n\txfield = 'Closure_Time'\n\tyfields = 'count:Request_Number'\n\timportedTemplate = 'false'\n\t\tDelugeCriteria = '(((Request_Status == &quot;Hospitalised&quot;)))'\n\/>\n\n<\/column><column\n   \t\t width=\"33%\"\n   \t>\n\t<chart \n\t\n\ttype = 'Donut'\n\txtitle = 'Status'\n\tytitle = 'Count'\n\tbgColor = 'rgb(255, 255, 255)'\n\ttheme = 'theme1'\n\tlegendPos = 'center.top'\n\tappLinkName = 'thisapp'\n\tformLinkName = 'Bed_Request'\n\txfield = 'Request_Status'\n\tyfields = 'count:Request_Number'\n\timportedTemplate = 'false'\n\/>\n\n<\/column>\n<\/row><row>\n\t<column\n   \t\t width=\"100%\"\n   \t>\n\t<chart \n\t\n\ttitle = 'Volume Trend'\n\t\n\t\ttitleSize = '20px'\n\ttype = 'Line'\n\txtitle = 'Request Date'\n\tytitle = 'Count'\n\tbgColor = 'rgb(255, 255, 255)'\n\ttheme = 'theme1'\n\tlegendPos = 'center.top'\n\tappLinkName = 'thisapp'\n\tformLinkName = 'Bed_Request'\n\txfield = 'Request_Date'\n\tyfields = 'count:Request_Number'\n\timportedTemplate = 'false'\n\/>\n\n<\/column>\n<\/row><row>\n\t<column\n   \t\t width=\"100%\"\n   \t>\n\t<chart \n\t\n\ttitle = 'Triage Member Load'\n\t\n\t\ttitleSize = '20px'\n\ttype = 'Column'\n\txtitle = 'Triage Member'\n\tbgColor = 'rgb(255, 255, 255)'\n\ttheme = 'theme1'\n\tlegendPos = 'center.top'\n\tappLinkName = 'thisapp'\n\tformLinkName = 'Bed_Request'\n\txfield = 'Triage_Member_Email_Id'\n\tyfields = 'count:Request_Number'\n\timportedTemplate = 'false'\n\t\tDelugeCriteria = '(((((Request_Status != &quot;Invalid \/ Duplicate Request&quot;)&amp;&amp;(Request_Status != &quot;Invalid \/ Duplicate Request&quot;))&amp;&amp;(Triage_Member_Email_Id is not null ))))'\n\/>\n\n<\/column>\n<\/row><row>\n\t<column\n   \t\t width=\"100%\"\n   \t>\n\t<chart \n\t\n\ttitle = 'Volunteer(s) Load'\n\t\n\t\ttitleSize = '20px'\n\ttype = 'Column'\n\txtitle = 'Volunteers'\n\tytitle = 'Load'\n\tbgColor = 'rgb(255, 255, 255)'\n\ttheme = 'theme1'\n\tlegendPos = 'center.top'\n\tappLinkName = 'thisapp'\n\tformLinkName = 'Bed_Request'\n\txfield = 'Volunteer_Email_Ids'\n\tyfields = 'count:Request_Number'\n\timportedTemplate = 'false'\n\t\tDelugeCriteria = '(((((Request_Status != &quot;Invalid \/ Duplicate Request&quot;)&amp;&amp;(Request_Status != &quot;Bed Request Cancelled&quot;))&amp;&amp;(Request_Status != &quot;Hospitalised&quot;))))'\n\/>\n\n<\/column>\n<\/row><row>\n\t<column\n   \t\t width=\"100%\"\n   \t>\n\t<chart \n\t\n\ttitle = 'By Pincode'\n\t\n\t\ttitleSize = '20px'\n\ttype = 'Column'\n\txtitle = 'Pincode'\n\tytitle = 'Count'\n\tbgColor = 'rgb(255, 255, 255)'\n\ttheme = 'theme1'\n\tlegendPos = 'center.top'\n\tappLinkName = 'thisapp'\n\tformLinkName = 'Bed_Request'\n\txfield = 'Pincode'\n\tyfields = 'count:Request_Number'\n\timportedTemplate = 'false'\n\t\tDelugeCriteria = '(((Request_Status != &quot;Invalid \/ Duplicate Request&quot;)))'\n\/>\n\n<\/column>\n<\/row>\n<\/layout>\n<\/zml>" 
 	 	}
	}
	section Hospitals
	{
		icon = "health-hospital-32"
		map Hospital_View
		{
			displayName = "Hospital View"
			show all rows from Hospitals    
			(
				Hospital_Name as "Hospital Name"
				Address 
	 			(
	      			displayformat = [address_line_1+""+address_line_2+""+district_city+""+state_province+""+postal_Code+""+country]
	      			enable = Link_to_Map,Show_As_Text
	 			)
				O2_Beds_Availability as "O2 Beds Availability"
				Modified_Time as "Modified Time"
				Modified_User as "Modified User"
				Normal_Beds_Availability as "Normal Beds Availability"
				ICU_Ventilator_Availability as "ICU / Ventilator Availability"
				Type_of_Hospital as "Type of Hospital"
				Contact_Numbers as "Contact Numbers"
			)
			filters
			(
				Type_of_Hospital
				"O2 Bed Hospitals"  :  O2_Beds_Availability > 0
				"ICU Beds Available"  :  ICU_Ventilator_Availability > 0
				"Normal Beds Available"  :  Normal_Beds_Availability > 0
			)
			options
			(
	 			display field = Address
	 	 		radius = 50 Kms
		 		icon = "location-map-gps"
	 		)
			conditional formatting
			(
				"CCC"
				{
				condition = (Type_of_Hospital == "Covid Care Center")
				format = "color:#00b0ff;map-icon:health-bag-49;map-icon-color:#ffffff;"
				}
				"Covid care ward"
				{
				condition = (Type_of_Hospital == "Hospital With Covid Ward")
				format = "color:#c516ef;map-icon:business-bank;map-icon-color:#ffffff;"
				}
				"Covid Hospital"
				{
				condition = (Type_of_Hospital == "Covid Hospital")
				format = "color:#5dc35a;map-icon:education-school;map-icon-color:#000000;"
				}
			)
			quickview
			(
				layout
				(
		 			type = 2
					datablock1
					(
			 			layout type = 4
		     			title = "Overview"
						fields
						(
							Hospital_Name as "Hospital Name"
							Type_of_Hospital as "Type of Hospital"
							Normal_Beds_Availability as "Normal Beds Availability"
							O2_Beds_Availability as "O2 Beds Availability"
							ICU_Ventilator_Availability as "ICU / Ventilator Availability"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Hospital_Name as "Hospital Name"
							Type_of_Hospital as "Type of Hospital"
							Address
							Contact_Numbers as "Contact Numbers"
							Normal_Beds_Availability as "Normal Beds Availability"
							O2_Beds_Availability as "O2 Beds Availability"
							ICU_Ventilator_Availability as "ICU / Ventilator Availability"
							Modified_User as "Modified User"
							Modified_Time as "Modified Time"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
		default list All_Hospitals
		{
			displayName = "All Hospitals"
			show all rows from Hospitals    
			(
				Hospital_Name as "Hospital Name"
				Address 
	 			(
	      			displayformat = [address_line_1+""+address_line_2+""+district_city+""+state_province+""+postal_Code+""+country]
	      			enable = Link_to_Map,Show_As_Text
	 			)
				O2_Beds_Availability as "O2 Beds Availability"
				Normal_Beds_Availability as "Normal Beds Availability"
				ICU_Ventilator_Capacity as "ICU / Ventilator Capacity"
				ICU_Ventilator_Availability as "ICU / Ventilator Availability"
				Type_of_Hospital as "Type of Hospital"
				Contact_Numbers as "Contact Numbers"
				Notes
				Modified_User as "Modified User"
				Modified_Time as "Modified Time"
				Latitude
				Longitude
				Normal_Beds_Capacity as "Normal Beds Capacity"
				O2_Beds_Capacity as "O2 Beds Capacity"
				Auto_Number as "Auto Number"
				Data_Source as "Data Source"
				Old_Normal_Bed_Availability as "Old Normal Bed Availability"
				Old_O2_Bed_Availability as "Old O2 Bed Availability"
				Old_ICU_Ventilator_Availability as "Old ICU / Ventilator Availability"
			)
			filters
			(
				Type_of_Hospital
				"Normal Bed Available"  :  Normal_Beds_Availability > 0
				"O2 Bed Available"  :  O2_Beds_Availability > 0
				"ICU / Ventulator Available"  :  ICU_Ventilator_Availability > 0
			)
			options
			(
				icon = "travel-world"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Hospital_Name as "Hospital Name"
							Type_of_Hospital as "Type of Hospital"
							Contact_Numbers as "Contact Numbers"
							Address
							Latitude
							Longitude
							Normal_Beds_Capacity as "Normal Beds Capacity"
							Normal_Beds_Availability as "Normal Beds Availability"
							O2_Beds_Capacity as "O2 Beds Capacity"
							O2_Beds_Availability as "O2 Beds Availability"
							ICU_Ventilator_Capacity as "ICU / Ventilator Capacity"
							ICU_Ventilator_Availability as "ICU / Ventilator Availability"
							Notes
							Modified_Time as "Modified Time"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Hospital_Name as "Hospital Name"
							Type_of_Hospital as "Type of Hospital"
							Address
							Contact_Numbers as "Contact Numbers"
							O2_Beds_Availability as "O2 Beds Availability"
							Normal_Beds_Availability as "Normal Beds Availability"
							ICU_Ventilator_Availability as "ICU / Ventilator Availability"
							Notes
							Modified_User as "Modified User"
							Modified_Time as "Modified Time"
							Auto_Number as "Auto Number"
							Data_Source as "Data Source"
							Old_Normal_Bed_Availability as "Old Normal Bed Availability"
							Old_O2_Bed_Availability as "Old O2 Bed Availability"
							Old_ICU_Ventilator_Availability as "Old ICU / Ventilator Availability"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
		form Hospitals
		{
			success message = "Hospital Added Successfully"
			field alignment = left
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			must have Hospital_Name
			(
    			type = text
				displayname = "Hospital Name"
	 			row = 1
	 			column = 1   
				width = medium
			)
			Address
			(
    			type = address
     			capture_coordinates = true
     			adjust_using_map = true
     			address_line_1
     			(
	     			  type = address_line_1
	     			  displayname = "Address Line 1"
     			) 
     			address_line_2
     			(
	     			  type = address_line_2
	     			  displayname = "Address Line 2"
     			) 
     			district_city
     			(
	     			  type = district_city
	     			  displayname = "City / District"
     			) 
     			state_province
     			(
	     			  type = state_province
	     			  displayname = "State / Province"
     			) 
     			postal_Code
     			(
	     			  type = postal_Code
	     			  displayname = "Postal Code"
     			) 
     			country
     			(
	     			  type = country
	     			  displayname = "Country"
     			) 
     			latitude
     			(
	     			  type = latitude
	     			  displayname = "latitude"
	     			 visibility = false
     			) 
     			longitude
     			(
	     			  type = longitude
	     			  displayname = "longitude"
	     			 visibility = false
     			) 
	 			row = 1
	 			column = 1   
				width = medium
				personal data = true
			)
			Latitude
			(
				type = decimal
				maxchar = 19
				decimalplace = 17
	 			row = 1
	 			column = 1   
				width = medium
			)
			Longitude
			(
				type = decimal
				maxchar = 19
				decimalplace = 17
	 			row = 1
	 			column = 1   
				width = medium
			)
			Data_Source
			(
    			type = text
				displayname = "Data Source"
	 			row = 1
	 			column = 1   
				width = medium
			)
			Type_of_Hospital
			(
				type = picklist
				displayname = "Type of Hospital"
				values = {"Covid Care Center", "Hospital With Covid Ward", "Covid Hospital"}
	 			row = 1
	 			column = 2   
				width = medium
			)
			Contact_Numbers
			(
    			type = textarea
				displayname = "Contact Numbers"
				height = 100px
	 			row = 1
	 			column = 2   
				width = medium
			)
			Notes
			(
    			type = textarea
				height = 100px
	 			row = 1
	 			column = 2   
				width = medium
			)
			Auto_Number
			(
    			type = autonumber
				displayname = "Auto Number"
				start index = 1
	 			row = 1
	 			column = 2   
				width = medium
			)
			Beds
			(
				type = section
				displayname = "Bed Availability"
				visibility = true
	 			row = 2
	 			column = 0   
				width = medium
			)
			Normal_Beds_Capacity
			(
				type = number
				displayname = "Normal Beds Capacity"
	 			row = 2
	 			column = 1   
				width = medium
			)
			O2_Beds_Capacity
			(
				type = number
				displayname = "O2 Beds Capacity"
	 			row = 2
	 			column = 1   
				width = medium
			)
			ICU_Ventilator_Capacity
			(
				type = number
				displayname = "ICU / Ventilator Capacity"
	 			row = 2
	 			column = 1   
				width = medium
			)
			Total_Capacity
			(
    			type = formula
				displayname = "Total Capacity"
				value =  input.ICU_Ventilator_Capacity + input.O2_Beds_Capacity + input.Normal_Beds_Capacity
				visibility = true
	 			row = 2
	 			column = 1   
				width = medium
			)
			Old_Normal_Bed_Availability
			(
				type = number
				displayname = "Old Normal Bed Availability"
				initial value = 0
				private = true
	 			row = 2
	 			column = 1   
				width = medium
			)
			Old_ICU_Ventilator_Availability
			(
				type = number
				displayname = "Old ICU / Ventilator Availability"
				initial value = 0
				private = true
	 			row = 2
	 			column = 1   
				width = medium
			)
			Normal_Beds_Availability
			(
				type = number
				displayname = "Normal Beds Availability"
	 			row = 2
	 			column = 2   
				width = medium
			)
			O2_Beds_Availability
			(
				type = number
				displayname = "O2 Beds Availability"
	 			row = 2
	 			column = 2   
				width = medium
			)
			ICU_Ventilator_Availability
			(
				type = number
				displayname = "ICU / Ventilator Availability"
	 			row = 2
	 			column = 2   
				width = medium
			)
			Total_Availability
			(
    			type = formula
				displayname = "Total Availability"
				value =  input.Normal_Beds_Availability + input.ICU_Ventilator_Availability + input.O2_Beds_Availability
				visibility = true
	 			row = 2
	 			column = 2   
				width = medium
			)
			Old_O2_Bed_Availability
			(
				type = number
				displayname = "Old O2 Bed Availability"
				initial value = 0
				private = true
	 			row = 2
	 			column = 2   
				width = medium
			)
	
			customize
			(
				icon = "health-hospital-32"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
	}
	section Triage_Teams
	{
		displayname= "Triage Teams"
		icon = "users-multiple-11"
		default list All_Triage_Teams
		{
			displayName = "All Triage Teams"
			show all rows from Triage_Team    
			(
				Name 
	 			(
	      			displayformat = [first_name+""+prefix+""+last_name+""+suffix]
	 			)
				Email
				Phone_Number as "Phone"
				(
					displayformat = plainnumber 
					linktodial = enable
				)
				Active
				Added_Time as "Added Time"
				Modified_Time as "Modified Time"
				Added_User as "Added User"
				custom action "Deactivate"
				(
	  			workflow = Deactivate_Triage_Member
				show action in edit record menu = true
				column header = "Deactivate"
				condition = (Active == true)
				confirmation before execution
				(
					message for individual record = "Do you want to deactivate this triage user?"
					confirm button text = "Yes"		
					cancel button text = "No"
				)
				)
			)
			options
			(
				icon = "travel-world"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Name
							Email
							Phone_Number as "Phone"
							Active
							Added_Time as "Added Time"
							Modified_Time as "Modified Time"
							Added_User as "Added User"
				"Deactivate"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Name
							Email
							Phone_Number as "Phone"
							Active
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
		form Triage_Team
		{
			displayname = "Triage Team"
			success message = "Triage Team Added Successfully"
			field alignment = left
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			must have Name
			(
    			type = name
     			prefix
     			(
	     			 type = prefix
	     			 displayname ="Prefix"
	     			 visibility = false
	     			 value = {"Mr.","Mrs.","Ms."}
     			) 
     			first_name
     			(
	     			 type = first_name
	     			 displayname ="Name"
     			) 
     			last_name
     			(
	     			 type = last_name
	     			 displayname ="Last Name"
	     			 visibility = false
     			) 
     			suffix
     			(
	     			 type = suffix
	     			 displayname ="Suffix"
	     			 visibility = false
     			) 
	 			row = 1
	 			column = 1   
				width = large
				personal data = true
			)
			Phone_Number
			(
    			type = phonenumber
				displayname = "Phone"
	 			row = 1
	 			column = 1   
				width = medium
				personal data = true
			)
			must have Email
			(
    			type = email
	 			row = 1
	 			column = 1   
				width = medium
				personal data = true
			)
			Active
			(
    			type = checkbox
				initial value = false
	 			row = 1
	 			column = 2   
				width = medium
			)
	
			customize
			(
				icon = "ui-2-fat-add"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
	}
	section NGOs
	{
		icon = "business-hierarchy-53"
		default list NGOs_Report
		{
			displayName = "All NGOs"
			show all rows from NGOs    
			(
				NGO_Name as "NGO Name"
				Primary_Contact_Name  as "Primary Contact Name"
	 			(
	      			displayformat = [first_name+""+prefix+""+last_name+""+suffix]
	 			)
				Phone_Number as "Phone"
				(
					displayformat = plainnumber 
					linktodial = enable
				)
				Email
				Signup_Date as "Signup Date"
				Address 
	 			(
	      			displayformat = [address_line_1+""+address_line_2+""+district_city+""+state_province+""+postal_Code+""+country]
	      			enable = Link_to_Map,Show_As_Text
	 			)
			)
			options
			(
				icon = "business-laptop-71"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							NGO_Name as "NGO Name"
							Primary_Contact_Name as "Primary Contact Name"
							Phone_Number as "Phone"
							Email
							Signup_Date as "Signup Date"
							Address
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							NGO_Name as "NGO Name"
							Primary_Contact_Name as "Primary Contact Name"
							Phone_Number as "Phone"
							Email
							Signup_Date as "Signup Date"
							Address
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
		form NGOs
		{
			success message = "Data Added Successfully!"
			field alignment = left
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			must have NGO_Name
			(
    			type = text
				displayname = "NGO Name"
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Primary_Contact_Name
			(
    			type = name
				displayname = "Primary Contact Name"
     			prefix
     			(
	     			 type = prefix
	     			 displayname ="Prefix"
	     			 visibility = false
	     			 value = {"Mr.","Mrs.","Ms."}
     			) 
     			first_name
     			(
	     			 type = first_name
	     			 displayname ="First Name"
     			) 
     			last_name
     			(
	     			 type = last_name
	     			 displayname ="Last Name"
     			) 
     			suffix
     			(
	     			 type = suffix
	     			 displayname ="Suffix"
	     			 visibility = false
     			) 
	 			row = 1
	 			column = 1   
				width = medium
				personal data = true
			)
			must have Phone_Number
			(
    			type = phonenumber
				displayname = "Phone"
	 			row = 1
	 			column = 1   
				width = medium
				personal data = true
			)
			must have Email
			(
    			type = email
	 			row = 1
	 			column = 1   
				width = medium
				personal data = true
			)
			must have Signup_Date
			(
    			type = date
				displayname = "Signup Date"
				initial value = "${zoho.currentdate}"
				alloweddays = 0,1,2,3,4,5,6
	 			row = 1
	 			column = 1   
				width = medium
			)
			Address
			(
    			type = address
     			capture_coordinates = true
     			adjust_using_map = false
     			address_line_1
     			(
	     			  type = address_line_1
	     			  displayname = "Address Line 1"
     			) 
     			address_line_2
     			(
	     			  type = address_line_2
	     			  displayname = "Address Line 2"
     			) 
     			district_city
     			(
	     			  type = district_city
	     			  displayname = "City / District"
     			) 
     			state_province
     			(
	     			  type = state_province
	     			  displayname = "State / Province"
     			) 
     			postal_Code
     			(
	     			  type = postal_Code
	     			  displayname = "Postal Code"
     			) 
     			country
     			(
	     			  type = country
	     			  displayname = "Country"
     			) 
     			latitude
     			(
	     			  type = latitude
	     			  displayname = "latitude"
	     			 visibility = false
     			) 
     			longitude
     			(
	     			  type = longitude
	     			  displayname = "longitude"
	     			 visibility = false
     			) 
	 			row = 1
	 			column = 1   
				width = medium
				personal data = true
			)
	
			customize
			(
				icon = "ui-2-fat-add"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
	}
	section Volunteers
	{
		icon = "users-2-wc"
		default list All_Volunteers
		{
			displayName = "All Volunteers"
			show all rows from Volunteers    
			(
				Volunteer_Name  as "Volunteer Name"
	 			(
	      			displayformat = [first_name+""+prefix+""+last_name+""+suffix]
	 			)
				Phone_Number as "Phone"
				(
					displayformat = plainnumber 
					linktodial = enable
				)
				Volunteer_Email as "Volunteer Email"
				Signup_Date as "Signup Date"
				Active
				NGO
				Added_User as "Added User"
				Added_Time as "Added Time"
				Modified_Time as "Modified Time"
			)
			options
			(
				icon = "travel-world"
	 		)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Volunteer_Name as "Volunteer Name"
							Phone_Number as "Phone"
							Volunteer_Email as "Volunteer Email"
							Signup_Date as "Signup Date"
							Active
							NGO
							Added_User as "Added User"
							Added_Time as "Added Time"
							Modified_Time as "Modified Time"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Volunteer_Name as "Volunteer Name"
							Phone_Number as "Phone"
							Volunteer_Email as "Volunteer Email"
							Signup_Date as "Signup Date"
							Active
							NGO
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
		form Volunteers
		{
			success message = "Volunteer Added Successfully"
			field alignment = left
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			must have Volunteer_Name
			(
    			type = name
				displayname = "Volunteer Name"
     			prefix
     			(
	     			 type = prefix
	     			 displayname ="Prefix"
	     			 visibility = false
	     			 value = {"Mr.","Mrs.","Ms."}
     			) 
     			first_name
     			(
	     			 type = first_name
	     			 displayname ="Name"
     			) 
     			last_name
     			(
	     			 type = last_name
	     			 displayname ="Last Name"
	     			 visibility = false
     			) 
     			suffix
     			(
	     			 type = suffix
	     			 displayname ="Suffix"
	     			 visibility = false
     			) 
	 			row = 1
	 			column = 1   
				width = large
				personal data = true
			)
			Phone_Number
			(
    			type = phonenumber
				displayname = "Phone"
	 			row = 1
	 			column = 1   
				width = medium
				personal data = true
			)
			must have unique Volunteer_Email
			(
    			type = email
				displayname = "Volunteer Email"
	 			row = 1
	 			column = 1   
				width = medium
				personal data = true
			)
			Signup_Date
			(
    			type = date
				displayname = "Signup Date"
				initial value = "${zoho.currentdate}"
				alloweddays = 0,1,2,3,4,5,6
	 			row = 1
	 			column = 1   
				width = medium
			)
			NGO
			(
				type = picklist
				values  = NGOs.ID
    			displayformat = [NGO_Name]
				sortorder = ascending
	 			row = 1
	 			column = 1   
				width = medium
			)
			Active
			(
    			type = checkbox
				initial value = true
    			description
    			[
    				type = tooltip
    			 	message = "Is the volunteer active now"
    			]
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "ui-2-fat-add"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
	}
	section Master_Status
	{
		displayname= "Master Status"
		icon = "health-pulse-phone"
		default custom Admin_Report
		{
			displayName = "Master Update"
			show all rows from Admin    
			(
				Master_Status as "Master Status"
				Updated_By as "Updated By"
				Updated_At as "Updated At"
			)
			options
			(
				icon = "business-laptop-71"
	 		)
			quickview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = 1
		     			title = "Overview"
						fields
						(
							Updated_At as "Updated At"
							Master_Status as "Master Status"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Master_Status as "Master Status"
							Updated_By as "Updated By"
							Updated_At as "Updated At"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
		form Admin
		{
			displayname = "Add Master Update"
			success message = "Data Added Successfully!"
			field alignment = left
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			must have Master_Status
			(
    			type = textarea
				displayname = "Master Status"
				height = 100px
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Updated_At
			(
    			type = datetime
				displayname = "Updated At"
				initial value = "${zoho.currenttime}"
				timedisplayoptions = "hh:mm:ss"
				alloweddays = 0,1,2,3,4,5,6
	 			row = 1
	 			column = 1   
				width = medium
			)
			Updated_By
			(
    			type = text
				displayname = "Updated By"
				private = true
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "ui-2-fat-add"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
	}
	section Bed_Request_Form
	{
		displayname= "Bed Request Form"
		default list Bed_Request_Form_Report
		{
			displayName = "Bed Request Form Report"
			show all rows from Bed_Request_Form    
			(
				Request_Number as "Request Number"
				Patient_Name  as "Patient Name / நோயாளியின் பெயர்"
	 			(
	      			displayformat = [first_name+""+prefix+""+last_name+""+suffix]
	 			)
				Patient_Age as "Patient Age / வயது"
				Gender as "Gender / பாலினம்"
				Phone as "Attender Phone / தொடர்பு எண்"
				Attender_Name  as "Attender Name"
	 			(
	      			displayformat = [first_name1+""+prefix1+""+last_name1+""+suffix1]
	 			)
				Email as "Attender Email / மின்னஞ்சல்"
				Pincode as "Pincode / அஞ்சல் குறியீடு"
				Currently_At as "Currently At / தற்போதைய இடம்"
				Current_Hospital as "Current Hospital / தற்போதைய மருத்துவமனை"
				Type_of_Bed_Needed as "Type of Bed Needed / படுக்கை வகை"
				Request_Date as "Request Date"
				Request_Time as "Request Time"
				RT_PCR_Results as "RT-PCR Results"
				Other_Remarks as "Other Remarks / பிற குறிப்புகள்"
				Patient_s_Address as "Locality"
				Chest_CT_Score as "Chest CT Score"
				SpO2_Reading as "SpO2 Reading"
				Slack_Message as "Slack Message"
				Slack_Status as "Slack Status"
			)
			quickview
			(
				layout
				(
		 			type = -1
					datablock1
					(
			 			layout type = -1
		     			title = "Overview"
						fields
						(
							Request_Number as "Request Number"
							Patient_Name as "Patient Name / நோயாளியின் பெயர்"
							Patient_Age as "Patient Age / வயது"
							Gender as "Gender / பாலினம்"
							Phone as "Attender Phone / தொடர்பு எண்"
							Attender_Name as "Attender Name"
							Email as "Attender Email / மின்னஞ்சல்"
							Pincode as "Pincode / அஞ்சல் குறியீடு"
							Currently_At as "Currently At / தற்போதைய இடம்"
							Current_Hospital as "Current Hospital / தற்போதைய மருத்துவமனை"
							Type_of_Bed_Needed as "Type of Bed Needed / படுக்கை வகை"
							Request_Date as "Request Date"
							Request_Time as "Request Time"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    		 			Add 
    		 			Print 
    		 			Import 
    		 			Export 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Print   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								Print   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Request_Number as "Request Number"
							Patient_Name as "Patient Name / நோயாளியின் பெயர்"
							Patient_Age as "Patient Age / வயது"
							Gender as "Gender / பாலினம்"
							Phone as "Attender Phone / தொடர்பு எண்"
							Attender_Name as "Attender Name"
							Email as "Attender Email / மின்னஞ்சல்"
							Pincode as "Pincode / அஞ்சல் குறியீடு"
							Currently_At as "Currently At / தற்போதைய இடம்"
							Current_Hospital as "Current Hospital / தற்போதைய மருத்துவமனை"
							Type_of_Bed_Needed as "Type of Bed Needed / படுக்கை வகை"
							Request_Date as "Request Date"
							Request_Time as "Request Time"
							RT_PCR_Results as "RT-PCR Results"
							Other_Remarks as "Other Remarks / பிற குறிப்புகள்"
							Patient_s_Address as "Locality"
							Chest_CT_Score as "Chest CT Score"
							SpO2_Reading as "SpO2 Reading"
							Slack_Message as "Slack Message"
							Slack_Status as "Slack Status"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Print 
    		 			Delete 
    	 			)
    			)
			)
		}
		form Bed_Request_Form
		{
			displayname = "Bed Request Form"
			success message = "Bed Request Added Successfully"
			field alignment = right
			Basic_Information
			(
				type = section
				displayname = "Bed Request"
				visibility = true
	 			row = 1
	 			column = 0   
				width = medium
			)
			Request_Number
			(
    			type = autonumber
				displayname = "Request Number"
				start index = 1
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Patient_Name
			(
    			type = name
				displayname = "Patient Name / நோயாளியின் பெயர்"
     			prefix
     			(
	     			 type = prefix
	     			 displayname ="Prefix"
	     			 visibility = false
	     			 value = {"Mr.","Mrs.","Ms."}
     			) 
     			first_name
     			(
	     			 type = first_name
	     			 displayname ="Name"
     			) 
     			last_name
     			(
	     			 type = last_name
	     			 displayname ="Last Name"
	     			 visibility = false
     			) 
     			suffix
     			(
	     			 type = suffix
	     			 displayname ="Suffix"
	     			 visibility = false
     			) 
	 			row = 1
	 			column = 1   
				width = large
				personal data = true
			)
			must have Patient_Age
			(
				type = number
				displayname = "Patient Age / வயது"
				maxchar = 3
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Gender
			(
				type = radiobuttons
				displayname = "Gender / பாலினம்"
				values = {"Male", "Female", "Others"}
				layout = 3
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have RT_PCR_Results
			(
				type = radiobuttons
				displayname = "RT-PCR Results"
				values = {"Positive", "Negative", "Test Not Done"}
				layout = 3
    			description
    			[
    				type = tooltip
    			 	message = "Enter the results from the RT-PCR test for the patient. If a test was not done then mark it as \"Test Not Done\""
    			]
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have SpO2_Reading
			(
    			type = text
				displayname = "SpO2 Reading"
	 			row = 1
	 			column = 1   
				width = medium
			)
			Chest_CT_Score
			(
    			type = text
				displayname = "Chest CT Score"
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Currently_At
			(
				type = radiobuttons
				displayname = "Currently At / தற்போதைய இடம்"
				values = {"Home", "Hospital"}
				layout = 2
	 			row = 1
	 			column = 1   
				width = medium
			)
			Current_Hospital
			(
    			type = text
				displayname = "Current Hospital / தற்போதைய மருத்துவமனை"
    			description
    			[
    				type = help_text
    			 	message = "If you are currently in a hospital, mention the hospital name."
    			]
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Patient_s_Address
			(
    			type = text
				displayname = "Locality"
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Pincode
			(
				type = number
				displayname = "Pincode / அஞ்சல் குறியீடு"
				maxchar = 6
    			description
    			[
    				type = help_text
    			 	message = "The pin code around which you need hospital bed for the patient."
    			]
	 			row = 1
	 			column = 1   
				width = small
			)
			must have Type_of_Bed_Needed
			(
				type = picklist
				displayname = "Type of Bed Needed / படுக்கை வகை"
				values = {"Normal Bed", "Oxygen Bed", "ICU/Ventilator"}
    			description
    			[
    				type = tooltip
    			 	message = "Choose the right kid of bed you need for us to be able to help you better."
    			]
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Attender_Name
			(
    			type = name
				displayname = "Attender Name"
     			prefix1
     			(
	     			 type = prefix
	     			 displayname ="Prefix"
	     			 visibility = false
	     			 value = {"Mr.","Mrs.","Ms."}
     			) 
     			first_name1
     			(
	     			 type = first_name
	     			 displayname ="Name"
     			) 
     			last_name1
     			(
	     			 type = last_name
	     			 displayname ="Last Name"
	     			 visibility = false
     			) 
     			suffix1
     			(
	     			 type = suffix
	     			 displayname ="Suffix"
	     			 visibility = false
     			) 
	 			row = 1
	 			column = 1   
				width = large
				personal data = true
			)
			must have Phone
			(
    			type = phonenumber
				displayname = "Attender Phone / தொடர்பு எண்"
	 			row = 1
	 			column = 1   
				width = medium
				personal data = true
			)
			Email
			(
    			type = email
				displayname = "Attender Email / மின்னஞ்சல்"
	 			row = 1
	 			column = 1   
				width = medium
				personal data = true
			)
			Other_Remarks
			(
    			type = textarea
				displayname = "Other Remarks / பிற குறிப்புகள்"
				height = 100px
    			description
    			[
    				type = tooltip
    			 	message = "If you want to describe the patient's conditions, difficulties, comorbidities etc you can use this space."
    			]
	 			row = 1
	 			column = 1   
				width = large
			)
			must have Request_Date
			(
    			type = date
				displayname = "Request Date"
				initial value = "${zoho.currentdate}"
				alloweddays = 0,1,2,3,4,5,6
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Request_Time
			(
    			type = time
				displayname = "Request Time"
				initial value = "${zoho.currenttime}"	
				timedisplayoptions = "hh:mm" 
	 			row = 1
	 			column = 1   
				width = medium
			)
			Slack_Message
			(
    			type = textarea
				displayname = "Slack Message"
				height = 100px
				private = true
	 			row = 1
	 			column = 1   
				width = medium
			)
			Slack_Status
			(
    			type = text
				displayname = "Slack Status"
				private = true
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		print template
			{
				New_Request_For_Triage
				{
						displayname = "New Request For Triage"
						content = {"pageNumberOption":null,"orientation":"null","images":[{"fileName":"","imageId":"","imageType":"","fileId":""}],"isFooterEnabled":false,"containerStyle":"","templateStyle":"text-align: left; width: 793.7px; margin: 0px auto; padding: 30px","version":"2","layout":"1","mainLayout":[{"elements":[{"type":"columns","element":{"split":"100","id":"u_elem_14729069575000001","elemStyle":"","collayouts":[{"colElements":[{"type":"text","element":{"id":"u_elem_14729069470000003","fields":[],"content":"<div style=\"\"><br /><br /><\/div>"}}]}]}},{"type":"columns","element":{"split":"100","id":"u_elem_14729069825","elemStyle":"","collayouts":[{"colElements":[{"type":"text","element":{"id":"u_elem_14729069745000001","fields":[],"content":"<div style=\"\" spellcheck=\"false\"><h1 style=\"text-align: center\"><font color=\"#51b46e\">We have a new bed request that needs attention<\/font><\/h1><\/div>"}}]}]}},{"type":"columns","element":{"split":"100","id":"u_elem_14729070534999998","elemStyle":"","collayouts":[{"colElements":[{"type":"text","element":{"id":"u_elem_14729070254999999","fields":[],"content":"<div style=\"\"><br /><\/div>"}}]}]}},{"type":"columns","element":{"split":"100","id":"u_elem_14729073805","elemStyle":"","collayouts":[{"colElements":[{"type":"text","element":{"id":"u_elem_14729070905000001","fields":[],"content":"<div style=\"\"><p style=\"text-align: center\"><font size=\"3\">Please find below the details<\/font><\/p><\/div>"}}]}]}},{"type":"columns","element":{"split":"100","id":"u_elem_14729074254999999","elemStyle":"","collayouts":[{"colElements":[{"type":"text","element":{"id":"u_elem_14729074125","fields":[],"content":"<div style=\"\"><br /><br /><\/div>"}}]}]}},{"type":"columns","element":{"split":"100","id":"u_elem_14729094189999996","elemStyle":"","collayouts":[{"colElements":[{"id":"u_elem_86232661700749623","type":"fields","element":{"valueStyle":"width: 50%","valueTextStyle":"font-size: 14px; font-weight: bold","fieldLayoutType":"2","labelText":"Patient Name","wrapperStyle":"","labelStyle":"width: 50%","Label_Name":"Patient_Name","labelTextStyle":"","compFields":["prefix","first_name","last_name","suffix"]}}]}]}},{"type":"columns","element":{"split":"100","id":"u_elem_15040089074999996","elemStyle":"","collayouts":[{"colElements":[{"id":"u_elem_86232661700758794","type":"fields","element":{"valueStyle":"width: 50%","valueTextStyle":"font-size: 14px; font-weight: bold","fieldLayoutType":"2","labelText":"Patient Age","wrapperStyle":"","labelStyle":"width: 50%","Label_Name":"Patient_Age","labelTextStyle":""}},{"id":"u_elem_86232661700761028","type":"fields","element":{"valueStyle":"width: 50%","valueTextStyle":"font-size: 14px; font-weight: bold","fieldLayoutType":"2","labelText":"Request Date","wrapperStyle":"","labelStyle":"width: 50%","Label_Name":"Request_Date","labelTextStyle":""}}]}]}},{"type":"columns","element":{"split":"100","id":"u_elem_15068397660000002","elemStyle":"","collayouts":[{"colElements":[{"id":"u_elem_86232661700764696","type":"fields","element":{"valueStyle":"width: 50%","valueTextStyle":"font-size: 14px; font-weight: bold","fieldLayoutType":"2","labelText":"Request Time","wrapperStyle":"","labelStyle":"width: 50%","Label_Name":"Request_Time","labelTextStyle":""}},{"id":"u_elem_86232661700766638","type":"fields","element":{"valueStyle":"width: 50%","valueTextStyle":"font-size: 14px; font-weight: bold","fieldLayoutType":"2","labelText":"Pincode","wrapperStyle":"","labelStyle":"width: 50%","Label_Name":"Pincode","labelTextStyle":""}}]}]}},{"type":"columns","element":{"split":"100","id":"u_elem_14729094855000002","elemStyle":"","collayouts":[{"colElements":[{"type":"text","element":{"id":"u_elem_14729094649999999","fields":[],"content":"<div style=\"\"><p><span style=\"font-size: medium; letter-spacing: 0px\">Log into the Hospital Bed Assignment App and assign this request to yourself and work with a volunteer to help this patient in need.&nbsp;<\/span><br /><\/p><\/div>"}}]}]}},{"type":"columns","element":{"split":"100","id":"u_elem_14729095209999999","elemStyle":"","collayouts":[{"colElements":[{"type":"text","element":{"id":"u_elem_14729095110000001","fields":[],"content":"<div style=\"\"><br /><\/div>"}}]}]}},{"type":"columns","element":{"split":"100","id":"u_elem_14729096420000002","elemStyle":"","collayouts":[{"colElements":[{"type":"text","element":{"id":"u_elem_14729096335000003","fields":[],"content":"<div style=\"\"><p><font size=\"3\">Thank you for helping out.<\/font><\/p><\/div>"}}]}]}},{"type":"columns","element":{"split":"100","id":"u_elem_14729097555","elemStyle":"","collayouts":[{"colElements":[{"type":"spacer","element":{"id":"u_elem_6088770640000002","height":"25"}},{"type":"text","element":{"id":"u_elem_14729097025000002","fields":[],"content":"<div style=\"\"><p><font size=\"3\">-- Chennai COVID Task Force Team<\/font><\/p><\/div>"}}]}]}}],"id":1}],"resize":"A4","header":{"imageId":"","elements":[{"type":"columns","element":{"split":"23,54,23","id":"u_elem_1472903028","elemStyle":"","collayouts":[{"colElements":[{"type":"text","element":{"id":"u_elem_1472906729","fields":[],"content":"<div style=\"\"><p><br /><\/p><\/div>"}}]},{"colElements":[{"type":"columns","element":{"split":"100","id":"u_elem_1472906764","elemStyle":"","collayouts":[{"colElements":[{"type":"text","element":{"id":"u_elem_14729068789999997","fields":[],"content":"<div style=\"\"><p><br /><\/p><\/div>"}}]}]}}]},{"colElements":[{"type":"text","element":{"id":"u_elem_14729068910000002","fields":[],"content":"<div style=\"\"><p><br /><\/p><\/div>"}}]}]}}],"style":"border-color: rgb(255, 255, 255); background-color: rgb(255, 255, 255)","bgImg":""},"themeFont":"ntent-wrapper builderContent builder_body_outer_wrapper recordSummarybuilder","isHeaderEnabled":true}
				}
			}
		}
	}
	section Help
	{
		icon = "travel-info"
				 page Help 
	 	 { 
 	 	 displayname = "Help" 

 	 	 icon = "travel-info" 
	 	 Content="<zml    \n\t\t\tisPdfEnabled='false'\n\t\t\n\t\t\tisPrintEnabled='false'\n\t\t\n\t\t\n\t\t\n\t\t\n>\n\t<layout>\n\t<row>\n\t<column\n   \t\t width=\"100%\"\n   \t>\n\t<dsp id='html_snippet' bgColor=\"#FFFFFF\" \n>\n\t<![CDATA[htmlpage html_snippet()\ncontent\n&lt;%{\n\t%&gt;\n&lt;div style=&quot;padding:40px&quot;&gt;\n&lt;h2&gt;Click the link below to access the training and the help content&lt;\/h2&gt;\n&lt;h3&gt;&lt;a href=&quot;https:\/\/www.notion.so\/Chennai-Covid-Hospital-Help-050c79b4eca4433b8a82c797197ce1d2&quot; target=&quot;_blank&quot;&gt;Help &amp; FAQs&lt;\/a&gt;&lt;\/h3&gt;\n&lt;\/div&gt;\n&lt;%\n\n}%&gt;]]>\n<\/dsp>\n<\/column>\n<\/row>\n<\/layout>\n<\/zml>" 
 	 	}
	}
	section Setups
	{
		icon = "tech-2-p-settings"
		form Setup
		{
			success message = "Setup Added Successfully"
			field alignment = left
			Section
			(
				type = section
	 			row = 1
	 			column = 0   
				width = medium
			)
			Setup_ID
			(
    			type = autonumber
				displayname = "Setup ID"
				start index = 1
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Bed_Requests_Slack_Channel
			(
    			type = text
				displayname = "Bed Requests Slack Channel"
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Command_Center_Slack_Channel
			(
    			type = text
				displayname = "Command Center Slack Channel"
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Master_Status_API
			(
    			type = text
				displayname = "Master Status API"
	 			row = 1
	 			column = 1   
				width = medium
			)
			must have Update_Status_API
			(
    			type = text
				displayname = "Update Status API"
	 			row = 1
	 			column = 1   
				width = medium
			)
	
			customize
			(
				icon = "objects-controller"
			)
			actions
			{
				on add
				{
					submit
					(
   						type = submit
   						displayname = "Submit"
					)
					reset
					(
   						type = reset
   						displayname = "Reset"
					)
				}
				on edit
				{
					update
					(
   						type = submit
   						displayname = "Update"
					)
					cancel
					(
   						type = cancel
   						displayname = "Cancel"
					)
				}
			}
		}
		default custom All_Setups
		{
			displayName = "All Setups"
			show all rows from Setup    
			(
				Bed_Requests_Slack_Channel as "Bed Requests Slack Channel"
				Command_Center_Slack_Channel as "Command Center Slack Channel"
				Setup_ID as "Setup ID"
				Master_Status_API as "Master Status API"
				Update_Status_API as "Update Status API"
			)
			options
			(
				icon = "travel-world"
	 		)
			quickview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = 1
		     			title = "Overview"
						fields
						(
							Setup_ID as "Setup ID"
							Command_Center_Slack_Channel as "Command Center Slack Channel"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
							record
							(
								Edit   	   
								Duplicate   	   
								Delete   	   
    						)
    			)
    			action
    			(
							on click
							(
								View Record   	   
    						)
							on right click
							(
								Edit   	   
								Delete   	   
								Duplicate   	   
								View Record   	   
    						)
     			)
			)
			detailview
			(
				layout
				(
		 			type = 1
					datablock1
					(
			 			layout type = -2
		     			title = "Overview"
						fields
						(
							Bed_Requests_Slack_Channel as "Bed Requests Slack Channel"
							Command_Center_Slack_Channel as "Command Center Slack Channel"
							Setup_ID as "Setup ID"
							Master_Status_API as "Master Status API"
							Update_Status_API as "Update Status API"
						)
					)
				)

				menu
    			(
    	 			header
    	 			(
    		 			Edit 
    		 			Duplicate 
    		 			Delete 
    	 			)
    			)
			)
		}
	}
	functions
	{
 			string getAPIURL(string apiName)
			{
				setup = Setup[Setup_ID == 1];
				if(apiName == "masterStatus")
				{
					// 		return "https://us-central1-chennaicovidbedhelp.cloudfunctions.net/masterStatus";
					return setup.Master_Status_API;
				}
				if(apiName == "updateBedRequestStatus")
				{
					// 		return "https://us-central1-chennaicovidbedhelp.cloudfunctions.net/updateBedRequestStatus";
					return setup.Update_Status_API;
				}
				return "";
			}
 			void updateWebsite(string apiName, map updateData)
			{
				websiteUpdate = invokeurl
			[
				url :thisapp.getAPIURL(apiName)
				type :POST
				parameters:updateData
			];
				//     websiteUpdate = postUrl(thisapp.getAPIURL(apiName) , updateData);
			}
 			void notifySlack()
			{
				postURl = thisapp.getSlackChannelWebhookURL("bed-requests");
				stringMessage = "{ #!#blocks#!#: [ { #!#type#!#: #!#section#!#, #!#text#!#: { #!#type#!#: #!#mrkdwn#!#, #!#text#!#: #!#We have received a *new bed request*#!# } }, { #!#type#!#: #!#section#!#, #!#fields#!#: [ { #!#type#!#: #!#plain_text#!#, #!#text#!#: #!#Patient Name#!#, #!#emoji#!#: true }, { #!#type#!#: #!#plain_text#!#, #!#text#!#: #!#XPatient NameX#!#, #!#emoji#!#: true }, { #!#type#!#: #!#plain_text#!#, #!#text#!#: #!#Age & Gender#!#, #!#emoji#!#: true }, { #!#type#!#: #!#plain_text#!#, #!#text#!#: #!#XAge & GenderX#!#, #!#emoji#!#: true }, { #!#type#!#: #!#plain_text#!#, #!#text#!#: #!#RT PCR Result#!#, #!#emoji#!#: true }, { #!#type#!#: #!#plain_text#!#, #!#text#!#: #!#XRT PCR ResultX#!#, #!#emoji#!#: true }, { #!#type#!#: #!#plain_text#!#, #!#text#!#: #!#SpO2#!#, #!#emoji#!#: true }, { #!#type#!#: #!#plain_text#!#, #!#text#!#: #!#XSpO2X#!#, #!#emoji#!#: true }, { #!#type#!#: #!#plain_text#!#, #!#text#!#: #!#CT Scan Score#!#, #!#emoji#!#: true }, { #!#type#!#: #!#plain_text#!#, #!#text#!#: #!#XCT Scan ScoreX#!#, #!#emoji#!#: true } ] } ] }";
				messageData = Map();
				stringMessage = replaceAll(stringMessage,"XPatient NameX","Ravindran");
				stringMessage = replaceAll(stringMessage,"XAge & GenderX","45 / M");
				stringMessage = replaceAll(stringMessage,"XRT PCR ResultX","Positive");
				stringMessage = replaceAll(stringMessage,"XSpO2X","85");
				stringMessage = replaceAll(stringMessage,"XCT Scan ScoreX","8");
				stringMessage = replaceAll(stringMessage,"#!#","\"");
				info stringMessage;
				header_data = Map();
				header_data.put("Content-Type","application/json");
				messageData.put("text","Testing!");
				// 	info messageData.toString();
				// 	messageDataText = toText(messageData);
				slackMessage = invokeurl
			[
				url :postURl
				type :POST
				parameters:stringMessage
				headers:header_data
			];
			}
 			void testFunction()
			{
				hoursDifference = 0;
				closureTime = hoursDifference + 1;
				postURl = "https://hooks.slack.com/services/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";
				stringMessage = "";
				if(closureTime <= 1)
				{
					stringMessage = "{#!#blocks#!#:[{#!#type#!#:#!#section#!#,#!#text#!#:{#!#type#!#:#!#mrkdwn#!#,#!#text#!#:#!#Kudos to XVolunteerNameX for helping XPatientNameX with a bed. \ud83c\udf89#!#}},{#!#type#!#:#!#section#!#,#!#text#!#:{#!#type#!#:#!#plain_text#!#,#!#text#!#:#!#You found a bed in less than XClosureTimeX hour.#!#,#!#emoji#!#:true}},{#!#type#!#:#!#image#!#,#!#image_url#!#:#!#https:\/\/media.giphy.com\/media\/3ohzdQ3TjcSdJqQa52\/giphy.gif#!#,#!#alt_text#!#:#!#You did it!#!#}]}";
				}
				else if(closureTime <= 2)
				{
					stringMessage = "{#!#blocks#!#:[{#!#type#!#:#!#section#!#,#!#text#!#:{#!#type#!#:#!#mrkdwn#!#,#!#text#!#:#!#Kudos to XVolunteerNameX for helping XPatientNameX with a bed. \ud83c\udf89#!#}},{#!#type#!#:#!#section#!#,#!#text#!#:{#!#type#!#:#!#plain_text#!#,#!#text#!#:#!#You found a bed in less than XClosureTimeX hours.#!#,#!#emoji#!#:true}},{#!#type#!#:#!#image#!#,#!#image_url#!#:#!#https:\/\/media.giphy.com\/media\/ftMKOEsgL2ALMks8by\/giphy.gif#!#,#!#alt_text#!#:#!#You did it!#!#}]}";
				}
				else
				{
					stringMessage = "{#!#blocks#!#:[{#!#type#!#:#!#section#!#,#!#text#!#:{#!#type#!#:#!#mrkdwn#!#,#!#text#!#:#!#Kudos to XVolunteerNameX for helping XPatientNameX with a bed. \ud83c\udf89#!#}}]}";
				}
				volunteerNames = "team";
				patientName = "Raghu";
				stringMessage = replaceAll(stringMessage,"XVolunteerNameX",volunteerNames);
				stringMessage = replaceAll(stringMessage,"XPatientNameX",patientName);
				stringMessage = replaceAll(stringMessage,"XClosureTimeX",closureTime + "");
				stringMessage = replaceAll(stringMessage,"#!#","\"");
				// input.Slack_Message = stringMessage;
				header_data = Map();
				header_data.put("Content-Type","application/json");
				slackMessage = invokeurl
			[
				url :postURl
				type :POST
				parameters:stringMessage
				headers:header_data
			];
				// input.Slack_Status = slackMessage;
			}
 			void testFunction2()
			{
				first_name = "Test - Raka .N";
				Primary_Phone = "+919840291578";
				Request_Status = "New";
				Status_Message = "";
				statusUpdate = Map();
				patientsName = replaceAll(first_name," ","*");
				replaceChar = "\.zoho".subString(0,2);
				info replaceChar;
				patientsName = replaceAll(patientsName,replaceChar,"-");
				patientsUID = patientsName + "-" + Primary_Phone;
				statusUpdate.put("aadhar",patientsUID);
				info patientsUID;
				statusUpdate.put("requestStatus",Request_Status);
				if(input.Status_Message != "")
				{
					statusUpdate.put("statusMessage",Status_Message);
				}
				else
				{
					statusUpdate.put("statusMessage","NA");
				}
				thisapp.updateWebsite("updateBedRequestStatus",statusUpdate);
			}
 			void updateClosureTime(int requestNumber)
			{
				bedRequest = Bed_Request[Request_Number == requestNumber];
				if(bedRequest.Request_Status == "Hospitalised")
				{
					if(bedRequest.Closure_Time != "")
					{
						bedRequest.Closure_Time="";
						info bedRequest.Closure_Time;
					}
				}
			}
 			string getSlackChannelWebhookURL(string channelName)
			{
				// 	settings = Setup[]
				setup = Setup[Setup_ID == 1];
				if(channelName == "bed-requests")
				{
					return setup.Bed_Requests_Slack_Channel;
				}
				if(channelName == "command-centre")
				{
					return setup.Command_Center_Slack_Channel;
				}
				return "";
			}
	}



		workflow
		{
		form
		{
			Validate_Form_Submission as "Validate Form Submission"
			{
				type =  form
				form = Bed_Request
				record event = on add or edit

				on validate
				{
					actions 
					{
						custom deluge script
						(
											//If the request status is "Triage Team Assigned" then triage team member should be selected
										if(input.Request_Status != "New" && input.Request_Status != "Invalid / Duplicate Request")
										{
											if(input.Triage_Team > 0)
											{
												input.Triage_Team_Assigned_Time = zoho.currenttime;
											}
											else
											{
												alert "Triage Team member has not been selected";
												cancel submit;
											}
										}
										if(input.Request_Status != "New" && input.Request_Status != "Invalid / Duplicate Request" && input.Request_Status != "Triage Assigned")
										{
											if(input.Volunteers.isEmpty())
											{
												alert "Volunteer(s) have not been selected";
												cancel submit;
											}
											else
											{
												input.Volunteers_Assigned_Time = zoho.currenttime;
											}
										}
										if(input.Request_Status == "Bed Request Cancelled")
										{
											if(input.Cancelled_Reason is null)
											{
												alert "Select / Enter the reason for cancelling the request.";
												cancel submit;
											}
										}
										//If the request status is "Volunteer Assgined" then volunteer(s) should be selected
						)
					}
				}

			}
			Show_only_active_Triage_T as "Show only active Triage Team Members"
			{
				type =  form
				form = Bed_Request
				record event = on add or edit

				on load
				{
					actions 
					{
						custom deluge script
						(
											//Store the selected Triage Team Member
										selectedTriageMember = input.Triage_Team.ID;
										selectedVolunteers = input.Volunteers;
										clear Triage_Team;
										clear Volunteers;
										activeTriageMembers = Triage_Team[Active == true];
										activeVolunteers = Volunteers[Active == true];
										for each  activeTriage in activeTriageMembers
										{
											input.Triage_Team:ui.add(activeTriage.ID);
										}
										if(selectedTriageMember > 0)
										{
											Triage_Team.select(selectedTriageMember);
										}
										for each  activeVolunteer in activeVolunteers
										{
											input.Volunteers:ui.add(activeVolunteer.ID);
										}
										if(!selectedVolunteers.isEmpty())
										{
											for each  selectedVolunteer in selectedVolunteers
											{
												Volunteers.select(selectedVolunteer);
											}
										}
						)
					}
				}

			}
			Set_Triage_Volunteer_Emai as "Set Triage & Volunteer Email Ids"
			{
				type =  form
				form = Bed_Request
				record event = on add or edit

				on success
				{
					actions 
					{
						custom deluge script
						(
											// Set Volunteer Email Ids
										if(!input.Volunteers.isEmpty())
										{
											//  	selectedVolunteers = input.Volunteers;
											volunteerEmailIds = "";
											for each  sV in input.Volunteers
											{
												volunteer = Volunteers[Volunteer_Email == sV.Volunteer_Email];
												if(volunteerEmailIds == "")
												{
													volunteerEmailIds = sV.Volunteer_Email;
												}
												else
												{
													volunteerEmailIds = volunteerEmailIds + "," + sV.Volunteer_Email;
												}
											}
											input.Volunteer_Email_Ids = volunteerEmailIds;
										}
										// Set Triage member Email Id
										if(input.Triage_Team > 0)
										{
											triageMember = Triage_Team[ID == input.Triage_Team.ID];
											input.Triage_Member_Email_Id = triageMember.Email;
										}
						)
					}
					actions 
					{
						custom deluge script
						(
											//Notify the volunteers
										if(input.Volunteer_Email_Ids != "" && input.Volunteer_Slack_Sent != "Yes")
										{
											sendmail
											[
												from :zoho.adminuserid
												to :input.Volunteer_Email_Ids
												subject :"New bed request assigned to you"
												message :"<div>Hi Volunteer,</div>"
												Attachments :template:New_Request_For_Triage as inline
											]
											input.Volunteer_Slack_Sent = "Yes";
										}
						)
					}
				}

			}
			Show_and_hide_fields as "Show and hide fields"
			{
				type =  form
				form = Bed_Request
				record event = on add or edit

				on load
				{
					actions 
					{
						custom deluge script
						(
											//If currently in hospital then show Current Hospital name
										if(input.Currently_At == "Hospital")
										{
											show Current_Hospital;
										}
										else
										{
											hide Current_Hospital;
										}
						)
					}
				}

			}
			Show_Current_Hospital_or_ as "Show Current Hospital or Not"
			{
				type =  form
				form = Bed_Request
				record event = on add or edit

				on user input of Currently_At
				{
					actions 
					{
						custom deluge script
						(
											if(input.Currently_At == "Hospital")
										{
											show Current_Hospital;
										}
										else
										{
											hide Current_Hospital;
										}
						)
					}
				}

			}
			Update_Website as "Update Website"
			{
				type =  form
				form = Admin
				record event = on add or edit

				on success
				{
					actions 
					{
						custom deluge script
						(
											//Call the URL to update the website of the master status
										masterStatus = Map();
										masterStatus.put("statusMessage",input.Master_Status);
										apiURL = thisapp.getAPIURL("masterStatus");
										thisapp.updateWebsite("masterStatus",masterStatus);
										// websiteUpdate = postUrl(apiURL,masterStatus);
						)
					}
				}

			}
			Update_Website_Status as "Update Website Status"
			{
				type =  form
				form = Bed_Request
				record event = on add or edit

				on success
				{
					actions 
					{
						custom deluge script
						(
											//Status codes Triage Assigned, Volunteer Assigned, Patient Contacted, Bed Assigned, Invalid Request, Cancelled
										statusUpdate = Map();
										patientsName = replaceAll(input.Patient_Name.first_name," ","*");
										// patientsName = replaceAll(input.Patient_Name.first_name,".","-");
										replaceChar = "\.zoho".subString(0,2);
										// info  replaceChar;
										patientsName = replaceAll(patientsName,replaceChar,"-");
										patientsUID = patientsName + "-" + input.Primary_Phone;
										statusUpdate.put("aadhar",patientsUID);
										statusUpdate.put("requestStatus",input.Request_Status);
										if(input.Status_Message != "")
										{
											statusUpdate.put("statusMessage",input.Status_Message);
										}
										else
										{
											statusUpdate.put("statusMessage","NA");
										}
										thisapp.updateWebsite("updateBedRequestStatus",statusUpdate);
						)
					}
				}

			}
			Show_and_hide_hospital as "Show and hide hospital"
			{
				type =  form
				form = Bed_Request_Form
				record event = on add

				on user input of Currently_At
				{
					actions 
					{
						custom deluge script
						(
											//If currently in hospital then show Current Hospital name
										if(input.Currently_At == "Hospital")
										{
											show Current_Hospital;
										}
										else
										{
											hide Current_Hospital;
										}
						)
					}
				}

			}
			Disable_Request_Date_and_ as "Disable Request Date and Time"
			{
				type =  form
				form = Bed_Request_Form
				record event = on add

				on load
				{
					actions 
					{
						custom deluge script
						(
											input.Request_Date = zoho.currentdate;
										input.Request_Time = zoho.currenttime;
										hide Request_Date;
										hide Request_Time;
						)
					}
				}

			}
			Hide_Current_Hospital_Nam as "Hide Current Hospital Name"
			{
				type =  form
				form = Bed_Request_Form
				record event = on add

				on load
				{
					actions 
					{
						custom deluge script
						(
											hide Current_Hospital;
						)
					}
				}

			}
			Create_Request_Notify_Upd as "Create Request, Notify & Update Website"
			{
				type =  form
				form = Bed_Request_Form
				record event = on add

				on success
				{
					actions 
					{
						custom deluge script
						(
											insert into Bed_Request
										[
											Added_User=zoho.loginuser
											Attender_Name=input.Attender_Name
											Chest_CT_Score=input.Chest_CT_Score
											Current_Hospital=input.Current_Hospital
											Currently_At=input.Currently_At
											Gender=input.Gender
											Patient_Age=input.Patient_Age
											Patient_Name=input.Patient_Name
											Patient_s_Address=input.Patient_s_Address
											Pincode=input.Pincode
											Primary_Email=input.Email
											Primary_Phone=input.Phone
											RT_PCR_Results=input.RT_PCR_Results
											Request_Date=input.Request_Date
											Request_Status="New"
											Request_Time=input.Request_Time
											SpO2_Reading=input.SpO2_Reading
											Type_of_Bed_Needed=input.Type_of_Bed_Needed
											Other_Remarks=input.Other_Remarks
										]
						)
					}
					actions 
					{
						custom deluge script
						(
											// allTriageMembers = Triage_Team[Active == true];
										// triageEmailIds = "";
										// for each  triageMember in allTriageMembers
										// {
										// 	if(triageEmailIds != "")
										// 	{
										// 		triageEmailIds = "," + triageMember.Email;
										// 	}
										// 	else
										// 	{
										// 		triageEmailIds = triageMember.Email;
										// 	}
										// }
										// sendmail
										// [
										// 	from :zoho.adminuserid
										// 	to :triageEmailIds
										// 	subject :"New Bed Request"
										// 	message :"<div>Hi Triage Team<br></div>"
										// 	Attachments :template:New_Request_For_Triage as inline
										// ]
										// bedRequest = Bed_Request[Patient_s_Aadhar == input.Patient_s_Aadhar];
										// bedRequest.Triage_Email_Sent="Yes";
						)
					}
					actions 
					{
						custom deluge script
						(
											//Update website with New status
										//Status codes Triage Assigned, Volunteer Assigned, Patient Contacted, Bed Assigned, Invalid Request, Cancelled
										statusUpdate = Map();
										patientsName = replaceAll(input.Patient_Name.first_name," ","*");
										// patientsName = replaceAll(input.Patient_Name.first_name,".","*");
										replaceChar = "\.zoho".subString(0,2);
										// info  replaceChar;
										patientsName = replaceAll(patientsName,replaceChar,"-");
										patientsUID = patientsName + "-" + input.Phone;
										statusUpdate.put("aadhar",patientsUID);
										statusUpdate.put("requestStatus","New");
										statusUpdate.put("statusMessage","NA");
										thisapp.updateWebsite("updateBedRequestStatus",statusUpdate);
						)
					}
					actions 
					{
						custom deluge script
						(
											//Update Slack
										//https://hooks.slack.com/services/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
										// postURl = "https://hooks.slack.com/services/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";
										// message = Map();
										// message.put("text","Testing Slack integration");
										// slackMessage = postUrl( postURl, message);
						)
					}
				}

			}
			Update_Slack as "Update Slack"
			{
				type =  form
				form = Admin
				record event = on add
					status = inactive

				on success
				{
					actions 
					{
						custom deluge script
						(
											postURl = "https://hooks.slack.com/services/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";
										messageData = Map();
										header_data = Map();
										header_data.put("Content-Type","application/json");
										messageData.put("text",input.Master_Status);
										slackMessage = invokeurl
										[
											url :postURl
											type :POST
											parameters:messageData
											headers:header_data
										];
						)
					}
				}

			}
			Notify_Slack as "Notify Slack"
			{
				type =  form
				form = Bed_Request_Form
				record event = on add

				on success
				{
					actions 
					{
						custom deluge script
						(
											postURl = thisapp.getSlackChannelWebhookURL("bed-requests");
										stringMessage = "{ #!#blocks#!#: [ { #!#type#!#: #!#section#!#, #!#text#!#: { #!#type#!#: #!#mrkdwn#!#, #!#text#!#: #!#We have received a *new bed request*#!# } }, { #!#type#!#: #!#section#!#, #!#fields#!#: [ { #!#type#!#: #!#plain_text#!#, #!#text#!#: #!#Patient Name#!#, #!#emoji#!#: true }, { #!#type#!#: #!#plain_text#!#, #!#text#!#: #!#XPatient NameX#!#, #!#emoji#!#: true }, { #!#type#!#: #!#plain_text#!#, #!#text#!#: #!#Age & Gender#!#, #!#emoji#!#: true }, { #!#type#!#: #!#plain_text#!#, #!#text#!#: #!#XAge & GenderX#!#, #!#emoji#!#: true }, { #!#type#!#: #!#plain_text#!#, #!#text#!#: #!#RT PCR Result#!#, #!#emoji#!#: true }, { #!#type#!#: #!#plain_text#!#, #!#text#!#: #!#XRT PCR ResultX#!#, #!#emoji#!#: true }, { #!#type#!#: #!#plain_text#!#, #!#text#!#: #!#SpO2#!#, #!#emoji#!#: true }, { #!#type#!#: #!#plain_text#!#, #!#text#!#: #!#XSpO2X#!#, #!#emoji#!#: true }, { #!#type#!#: #!#plain_text#!#, #!#text#!#: #!#CT Scan Score#!#, #!#emoji#!#: true }, { #!#type#!#: #!#plain_text#!#, #!#text#!#: #!#XCT Scan ScoreX#!#, #!#emoji#!#: true } ] }, { #!#type#!#: #!#section#!#, #!#fields#!#: [ { #!#type#!#: #!#plain_text#!#, #!#text#!#: #!#Currently At#!#, #!#emoji#!#: true }, { #!#type#!#: #!#plain_text#!#, #!#text#!#: #!#XCurrently AtX#!#, #!#emoji#!#: true }, { #!#type#!#: #!#plain_text#!#, #!#text#!#: #!#Locality#!#, #!#emoji#!#: true }, { #!#type#!#: #!#plain_text#!#, #!#text#!#: #!#XLocalityX#!#, #!#emoji#!#: true }, { #!#type#!#: #!#plain_text#!#, #!#text#!#: #!#Pincode#!#, #!#emoji#!#: true }, { #!#type#!#: #!#plain_text#!#, #!#text#!#: #!#XPincodeX#!#, #!#emoji#!#: true }, { #!#type#!#: #!#plain_text#!#, #!#text#!#: #!#Type of Bed Needed#!#, #!#emoji#!#: true }, { #!#type#!#: #!#plain_text#!#, #!#text#!#: #!#XType of Bed NeededX#!#, #!#emoji#!#: true }, { #!#type#!#: #!#plain_text#!#, #!#text#!#: #!#Other Remarks#!#, #!#emoji#!#: true }, { #!#type#!#: #!#plain_text#!#, #!#text#!#: #!#XOther RemarksX#!#, #!#emoji#!#: true } ] } ] }";
										messageData = Map();
										stringMessage = replaceAll(stringMessage,"XPatient NameX",input.Patient_Name.first_name);
										stringMessage = replaceAll(stringMessage,"XAge & GenderX",input.Patient_Age + " / " + input.Gender);
										stringMessage = replaceAll(stringMessage,"XRT PCR ResultX",input.RT_PCR_Results);
										stringMessage = replaceAll(stringMessage,"XSpO2X",input.SpO2_Reading + "");
										stringMessage = replaceAll(stringMessage,"XCT Scan ScoreX",input.Chest_CT_Score + "");
										stringMessage = replaceAll(stringMessage,"XCurrently AtX",input.Currently_At);
										stringMessage = replaceAll(stringMessage,"XLocalityX",input.Patient_s_Address);
										stringMessage = replaceAll(stringMessage,"XPincodeX",input.Pincode + "");
										stringMessage = replaceAll(stringMessage,"XType of Bed NeededX",input.Type_of_Bed_Needed);
										// otherRemarks = "";
										// if (input.Other_Remarks == "") {
										// 	input.Other_Remarks = "NA";
										// }
										// if(input.Other_Remarks == "")
										// {
										// 	otherRemarks = "NA";
										// }
										// else
										// {
										// 	otherRemarks = input.Other_Remarks;
										// }
										stringMessage = replaceAll(stringMessage,"XOther RemarksX",input.Other_Remarks + " ");
										stringMessage = replaceAll(stringMessage,"#!#","\"");
										info stringMessage;
										input.Slack_Message = stringMessage;
										header_data = Map();
										header_data.put("Content-Type","application/json");
										// 	info messageData.toString();
										// 	messageDataText = toText(messageData);
										slackMessage = invokeurl
										[
											url :postURl
											type :POST
											parameters:stringMessage
											headers:header_data
										];
										input.Slack_Status = slackMessage;
										info slackMessage;
						)
					}
				}

			}
			Validate_Uniqueness_of_re as "Validate Uniqueness of request"
			{
				type =  form
				form = Bed_Request_Form
				record event = on add

				on validate
				{
					actions 
					{
						custom deluge script
						(
											//Check if there is already request for patient name & attender phone
										bedRequest = Bed_Request_Form[Patient_Name.first_name == input.Patient_Name.first_name && Phone == input.Phone];
										if(bedRequest.count(Patient_Name) > 0)
										{
											// 	info "We already have a request for this patient. You can track the status of your request in the Track Status page. If this is the first time you are submitting the request then kindly recheck the patient's name and attender's phone number you have entered.";
											alert "We already have a request for this patient. You can track the status of your request in the Track Status page. If this is the first time you are submitting the request then kindly recheck the patient's name and attender's phone number you have entered.";
											cancel submit;
										}
						)
					}
				}

			}
			Disable_read_only_fields as "Disable read only fields"
			{
				type =  form
				form = Bed_Request
				record event = on edit

				on load
				{
					actions 
					{
						custom deluge script
						(
											if(zoho.loginuserid != zoho.adminuserid)
										{
											disable Patient_Name;
											disable Primary_Phone;
											if(input.Request_Status != "Bed Request Cancelled")
											{
												hide Cancelled_Reason;
											}
										}
						)
					}
				}

			}
			Show_or_hide_cancelled_re as "Show or hide cancelled reason"
			{
				type =  form
				form = Bed_Request
				record event = on edit

				on user input of Request_Status
				{
					actions 
					{
						custom deluge script
						(
											if(input.Request_Status == "Bed Request Cancelled")
										{
											show Cancelled_Reason;
										}
										else
										{
											hide Cancelled_Reason;
										}
						)
					}
				}

			}
			Update_Lat_and_Lng as "Update Lat and Lng"
			{
				type =  form
				form = Hospitals
				record event = on add or edit

				on success
				{
					actions 
					{
						custom deluge script
						(
											if(input.Latitude > 0)
										{
											input.Address.latitude = input.Latitude + "";
										}
										if(input.Longitude > 0)
										{
											input.Address.longitude = input.Longitude + "";
										}
						)
					}
				}

			}
			Set_Non_Mandatory_Fields as "Set Non-Mandatory Fields"
			{
				type =  form
				form = Bed_Request_Form
				record event = on add

				on validate
				{
					actions 
					{
						custom deluge script
						(
											if(input.Other_Remarks == "")
										{
											input.Other_Remarks = "NA";
										}
										if(input.Chest_CT_Score = "")
										{
											input.Chest_CT_Score = "NA";
										}
						)
					}
				}

			}
			Notify_Slack_when_Volunte as "Notify Slack when Volunteers are assigned"
			{
				type =  form
				form = Bed_Request
				record event = on edit

				on success
				{
					actions 
					{
						custom deluge script
						(
											// Notify volunteers
										if(input.Volunteers.isEmpty())
										{
											// Do nothing
										}
										else
										{
											if(input.Volunteer_Slack_Sent == "Yes")
											{
												// Do nothing
											}
											else
											{
												postURl = thisapp.getSlackChannelWebhookURL("command-centre");
												stringMessage = "{ #!#blocks#!#: [ { #!#type#!#: #!#section#!#, #!#text#!#: { #!#type#!#: #!#mrkdwn#!#, #!#text#!#: #!#Bed request assigned to volunteers : XAssignedX #!# } }, { #!#type#!#: #!#section#!#, #!#fields#!#: [ { #!#type#!#: #!#plain_text#!#, #!#text#!#: #!#Patient Name#!#, #!#emoji#!#: true }, { #!#type#!#: #!#plain_text#!#, #!#text#!#: #!#XPatient NameX#!#, #!#emoji#!#: true }, { #!#type#!#: #!#plain_text#!#, #!#text#!#: #!#Age & Gender#!#, #!#emoji#!#: true }, { #!#type#!#: #!#plain_text#!#, #!#text#!#: #!#XAge & GenderX#!#, #!#emoji#!#: true }, { #!#type#!#: #!#plain_text#!#, #!#text#!#: #!#Attender's Phone#!#, #!#emoji#!#: true }, { #!#type#!#: #!#plain_text#!#, #!#text#!#: #!#XAttender's PhoneX#!#, #!#emoji#!#: true } ] },{ #!#type#!#: #!#section#!#, #!#text#!#: { #!#type#!#: #!#mrkdwn#!#, #!#text#!#: #!# Goto https://covidhospitalhelpdesk.zohocreatorportal.in/ immediately! #!# } } ] }";
												volunteerNames = "";
												for each  volunteer in input.Volunteers
												{
													if(volunteerNames != "")
													{
														// 				volunteerNames = volunteerNames + ", " + volunteer.Volunteer_Name.first_name + " " + volunteer.Volunteer_Name.last_name;
														volunteerNames = volunteerNames + ", " + volunteer.Volunteer_Name.first_name;
													}
													else
													{
														// 				volunteerNames = volunteer.Volunteer_Name.first_name + " " + volunteer.Volunteer_Name.last_name;
														volunteerNames = volunteer.Volunteer_Name.first_name;
													}
												}
												volunteerNames = volunteerNames + " by " + input.Triage_Team.Name;
												stringMessage = replaceAll(stringMessage,"XAssignedX",volunteerNames);
												stringMessage = replaceAll(stringMessage,"XPatient NameX",input.Patient_Name.first_name);
												stringMessage = replaceAll(stringMessage,"XAge & GenderX",input.Patient_Age + " / " + input.Gender);
												stringMessage = replaceAll(stringMessage,"XAttender's PhoneX",input.Primary_Phone);
												// 		stringMessage = replaceAll(stringMessage,"XRT PCR ResultX",input.RT_PCR_Results);
												// 		stringMessage = replaceAll(stringMessage,"XSpO2X",input.SpO2_Reading + " ");
												// 		stringMessage = replaceAll(stringMessage,"XCT Scan ScoreX",input.Chest_CT_Score + " ");
												// 		stringMessage = replaceAll(stringMessage,"XCurrently AtX",input.Currently_At);
												// 		stringMessage = replaceAll(stringMessage,"XLocalityX",input.Patient_s_Address);
												// 		stringMessage = replaceAll(stringMessage,"XPincodeX",input.Pincode + "");
												// 		stringMessage = replaceAll(stringMessage,"XType of Bed NeededX",input.Type_of_Bed_Needed);
												// 		stringMessage = replaceAll(stringMessage,"XOther RemarksX",input.Other_Remarks + " ");
												stringMessage = replaceAll(stringMessage,"#!#","\"");
												// 		info stringMessage;
												input.Slack_Message = stringMessage;
												header_data = Map();
												header_data.put("Content-Type","application/json");
												// 	info messageData.toString();
												// 	messageDataText = toText(messageData);
												slackMessage = invokeurl
										[
											url :postURl
											type :POST
											parameters:stringMessage
											headers:header_data
										];
												input.Slack_Status = slackMessage;
												// 		info slackMessage;
											}
										}
						)
					}
				}

			}
			Disable_edit_of_email_fie as "Disable edit of email field"
			{
				type =  form
				form = Triage_Team
				record event = on edit

				on load
				{
					actions 
					{
						custom deluge script
						(
											disable Email;
						)
					}
				}

			}
			Disable_Email_Edit as "Disable Email Edit"
			{
				type =  form
				form = Volunteers
				record event = on edit

				on load
				{
					actions 
					{
						custom deluge script
						(
											disable Volunteer_Email;
						)
					}
				}

			}
			Change_invalid_chars_in_t as "Change invalid chars in the name to star"
			{
				type =  form
				form = Bed_Request_Form
				record event = on add

				on validate
				{
					actions 
					{
						custom deluge script
						(
											//Change all the special chars
										patientsName = replaceAll(input.Patient_Name.first_name,".","");
						)
					}
				}

			}
			Set_Old_Availabilities_to as "Set Old Availabilities to Zero"
			{
				type =  form
				form = Hospitals
				record event = on add

				on success
				{
					actions 
					{
						custom deluge script
						(
											input.Old_Normal_Bed_Availability = 0;
										input.Old_O2_Bed_Availability = 0;
										input.Old_ICU_Ventilator_Availability = 0;
						)
					}
				}

			}
			Celebrate_on_Hospitalised as "Celebrate on Hospitalised"
			{
				type =  form
				form = Bed_Request
				record event = on edit

				on success
				{
					actions 
					{
						custom deluge script
						(
											if(input.Request_Status == "Hospitalised")
										{
											// 	volunteer = Volunteers[Volunteer_Email == zoho.loginuserid];
											if(!isDate(input.Hospitalized_Time))
											{
												input.Hospitalized_Time = zoho.currenttime;
											}
											hoursDifference = hoursBetween(input.Added_Time,input.Hospitalized_Time);
											input.Closure_Time = hoursDifference + "";
											closureTime = hoursDifference + 1;
											postURl = thisapp.getSlackChannelWebhookURL("command-centre");
											// 	stringMessage = "";
											// 	if(closureTime <= 1)
											// 	{
											// 		stringMessage = "{#!#blocks#!#:[{#!#type#!#:#!#section#!#,#!#text#!#:{#!#type#!#:#!#mrkdwn#!#,#!#text#!#:#!#Kudos to XVolunteerNameX for helping XPatientNameX with a bed. \ud83c\udf89#!#}},{#!#type#!#:#!#section#!#,#!#text#!#:{#!#type#!#:#!#plain_text#!#,#!#text#!#:#!#You found a bed in less than XClosureTimeX hour.#!#,#!#emoji#!#:true}},{#!#type#!#:#!#image#!#,#!#image_url#!#:#!#https:\/\/media.giphy.com\/media\/3ohzdQ3TjcSdJqQa52\/giphy.gif#!#,#!#alt_text#!#:#!#You did it!#!#}]}";
											// 	}
											// 	else if(closureTime <= 2)
											// 	{
											// 		stringMessage = "{#!#blocks#!#:[{#!#type#!#:#!#section#!#,#!#text#!#:{#!#type#!#:#!#mrkdwn#!#,#!#text#!#:#!#Kudos to XVolunteerNameX for helping XPatientNameX with a bed. \ud83c\udf89#!#}},{#!#type#!#:#!#section#!#,#!#text#!#:{#!#type#!#:#!#plain_text#!#,#!#text#!#:#!#You found a bed in less than XClosureTimeX hours.#!#,#!#emoji#!#:true}},{#!#type#!#:#!#image#!#,#!#image_url#!#:#!#https:\/\/media.giphy.com\/media\/ftMKOEsgL2ALMks8by\/giphy.gif#!#,#!#alt_text#!#:#!#You did it!#!#}]}";
											// 	}
											// 	else
											// 	{
											stringMessage = "{#!#blocks#!#:[{#!#type#!#:#!#section#!#,#!#text#!#:{#!#type#!#:#!#mrkdwn#!#,#!#text#!#:#!#Kudos to XVolunteerNameX for helping XPatientNameX with a bed. \ud83c\udf89#!#}}]}";
											// 	}
											// 	if(volunteer.count(Volunteer_Name) > 0)
											// 	{
											// 		volunteerName = volunteer.Volunteer_Name.first_name;
											// 	}
											// 	else
											// 	{
											// 		triageMember = Triage_Team[Email == zoho.loginuserid];
											// 		if(triageMember.count(Name) > 0)
											// 		{
											// 			volunteerName = triageMember.Name.first_name;
											// 		}
											// 		else
											// 		{
											// 			volunteerName = "Team";
											// 		}
											// 	}
											volunteerNames = "";
											for each  volunteer in input.Volunteers
											{
												if(volunteerNames != "")
												{
													volunteerNames = volunteerNames + ", " + volunteer.Volunteer_Name.first_name;
												}
												else
												{
													volunteerNames = volunteer.Volunteer_Name.first_name;
												}
											}
											if(volunteerNames == "")
											{
												volunteerNames = "team";
											}
											patientName = input.Patient_Name.first_name;
											stringMessage = replaceAll(stringMessage,"XVolunteerNameX",volunteerNames);
											stringMessage = replaceAll(stringMessage,"XPatientNameX",patientName);
											// 	stringMessage = replaceAll(stringMessage,"XClosureTimeX",closureTime + "");
											stringMessage = replaceAll(stringMessage,"#!#","\"");
											// input.Slack_Message = stringMessage;
											header_data = Map();
											header_data.put("Content-Type","application/json");
											slackMessage = invokeurl
										[
											url :postURl
											type :POST
											parameters:stringMessage
											headers:header_data
										];
											// input.Slack_Status = slackMessage;
										}
						)
					}
				}

			}
			Notify_Slack_if_positive_ as "Notify Slack if positive update"
			{
				type =  form
				form = Hospitals
				record event = on edit
					status = inactive

				on success
				{
					actions 
					{
						custom deluge script
						(
											postURl = "https://hooks.slack.com/services/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";
										stringMessage = "{#!#blocks#!#:[{#!#type#!#:#!#section#!#,#!#text#!#:{#!#type#!#:#!#mrkdwn#!#,#!#text#!#:#!#XQuantity&TypeOfBedX available at XHospitalNameX.#!#}}]}";
										quantityAndTypeOfBed = "";
										// info input.Old_Normal_Bed_Availability;
										if(input.Old_Normal_Bed_Availability > 0)
										{
											//Do nothing
										}
										else
										{
											input.Old_Normal_Bed_Availability = 0;
										}
										if(input.Old_O2_Bed_Availability is null)
										{
											input.Old_O2_Bed_Availability = 0;
										}
										if(input.Old_ICU_Ventilator_Availability is null)
										{
											input.Old_ICU_Ventilator_Availability = 0;
										}
										if(input.Normal_Beds_Availability > input.Old_Normal_Bed_Availability)
										{
											quantityAndTypeOfBed = input.Normal_Beds_Availability + " normal bed";
										}
										if(input.O2_Beds_Availability > input.Old_O2_Bed_Availability)
										{
											if(quantityAndTypeOfBed == "")
											{
												quantityAndTypeOfBed = input.O2_Beds_Availability + " O2 bed";
											}
											else
											{
												quantityAndTypeOfBed = quantityAndTypeOfBed + "," + input.O2_Beds_Availability + " O2 bed";
											}
										}
										if(input.ICU_Ventilator_Availability > input.Old_ICU_Ventilator_Availability)
										{
											if(quantityAndTypeOfBed == "")
											{
												quantityAndTypeOfBed = input.ICU_Ventilator_Availability + " ICU / Ventilator bed";
											}
											else
											{
												quantityAndTypeOfBed = quantityAndTypeOfBed + "," + input.ICU_Ventilator_Availability + " ICU / Ventilator bed";
											}
										}
										if(quantityAndTypeOfBed != "")
										{
											stringMessage = replaceAll(stringMessage,"XQuantity&TypeOfBedX",quantityAndTypeOfBed);
											stringMessage = replaceAll(stringMessage,"XHospitalNameX",input.Hospital_Name);
											stringMessage = replaceAll(stringMessage,"#!#","\"");
											header_data = Map();
											header_data.put("Content-Type","application/json");
											slackMessage = invokeurl
										[
											url :postURl
											type :POST
											parameters:stringMessage
											headers:header_data
										];
										}
										input.Old_O2_Bed_Availability = input.O2_Beds_Availability;
										input.Old_Normal_Bed_Availability = input.Normal_Beds_Availability;
										input.Old_ICU_Ventilator_Availability = input.ICU_Ventilator_Availability;
						)
					}
				}

			}
		}


		functions
		{
			Deactivate_Triage_Member as "Deactivate Triage Member"
			{
				type =  functions
				form = Triage_Team
				on start
				{
					actions 
					{
					on click
					(
						input.Active = false;
					)
					}
				}
			}
		}
	}
	share_settings
	{
			"Read"
			{
				name = "Read"
				type = Users_Permissions
				permissions = {Chat:true, Predefined:true, ApiAccess:true, PIIAccess:true, ePHIAccess:true}
				description = "This profile will have read permission for all components\n"
			}
			"Write"
			{
				name = "Write"
				type = Users_Permissions
				permissions = {Chat:true, Predefined:true, ApiAccess:true, PIIAccess:true, ePHIAccess:true}
				description = "This profile will have write permission for all components\n"
			}
			"Triage Team"
			{
				name = "Triage Team"
				type = Customer_Portal
				permissions = {Chat:false, Predefined:false, ApiAccess:true, PIIAccess:true, ePHIAccess:true}
				description = "Access for triage team\n"
				ModulePermissions
				{
					Bed_Request_Form
					{
						enabled= Create,Tab 
						allFieldsVisible= true 
					}
					Bed_Request
					{
						enabled= Viewall,Modifyall,Import,Export 
						allFieldsVisible= true 
						ReportPermissions
						{
							All_Bed_Requests={"View","Edit"}
							Bed_Requests_By_Status={"View","Edit"}
							Bed_Requests_by_Criticality={"View","Edit"}
							My_Triages={"View","Edit"}
							Untriaged_Requests={"View","Edit"}
						}
					}
					Hospitals
					{
						enabled= Create,Viewall,Modifyall,Import,Export,Tab 
						allFieldsVisible= true 
						ReportPermissions
						{
							Hospital_View={"View","Edit"}
							All_Hospitals={"View","Edit"}
						}
					}
					Triage_Team
					{
						enabled= Viewall 
						allFieldsVisible= true 
						ReportPermissions
						{
							All_Triage_Teams={"View"}
						}
					}
					NGOs
					{
						enabled= Viewall,Import,Export 
						allFieldsVisible= true 
						ReportPermissions
						{
							NGOs_Report={"View"}
						}
					}
					Admin
					{
						enabled= Viewall,Modifyall 
						allFieldsVisible= true 
						ReportPermissions
						{
							Admin_Report={"View","Edit"}
						}
					}
					Volunteers
					{
						enabled= Viewall,Import,Export 
						allFieldsVisible= true 
						ReportPermissions
						{
							All_Volunteers={"View"}
						}
					}
					Dashboard
					{
						enabled = tab
					}
					Help
					{
						enabled = tab
					}
				}
			}
			"Administrator"
			{
				name = "Administrator"
				type = Users_Permissions
				permissions = {Chat:true, Predefined:true, ApiAccess:true, PIIAccess:true, ePHIAccess:true}
				description = "This profile will have all the permissions.\n"
			}
			"Customer"
			{
				name = "Customer"
				type = Customer_Portal
				permissions = {Chat:false, Predefined:true, ApiAccess:true, PIIAccess:true, ePHIAccess:true}
				description = "This is the default profile having only add and view permission.\n"
			}
			"Volunteer"
			{
				name = "Volunteer"
				type = Customer_Portal
				permissions = {Chat:false, Predefined:false, ApiAccess:true, PIIAccess:true, ePHIAccess:true}
				description = "Access for volunteers\n"
				ModulePermissions
				{
					Bed_Request_Form
					{
						enabled= Create,Tab 
						allFieldsVisible= true 
					}
					Bed_Request
					{
						enabled= Viewall,Modifyall 
						allFieldsVisible= true 
						ReportPermissions
						{
							My_Requests={"View","Edit"}
						}
					}
					Hospitals
					{
						enabled= Create,Viewall,Modifyall,Export,Tab 
						allFieldsVisible= true 
						ReportPermissions
						{
							Hospital_View={"View","Edit"}
							All_Hospitals={"View","Edit"}
						}
					}
					Triage_Team
					{
						enabled= Viewall 
						allFieldsVisible= true 
						ReportPermissions
						{
							All_Triage_Teams={"View"}
						}
					}
					NGOs
					{
						allFieldsVisible= true 
					}
					Admin
					{
						allFieldsVisible= true 
					}
					Volunteers
					{
						enabled= Viewall 
						allFieldsVisible= true 
						ReportPermissions
						{
							All_Volunteers={"View"}
						}
					}
					Help
					{
						enabled = tab
					}
				}
			}
			"Developer"
			{
				name = "Developer"
				type = Developer
				permissions = {Chat:false, Predefined:true, ApiAccess:true, PIIAccess:true, ePHIAccess:true}
				description = "Developer Profile\n"
			}
			"Admin"
			{
				name = "Admin"
				type = Customer_Portal
				permissions = {Chat:false, Predefined:false, ApiAccess:true, PIIAccess:true, ePHIAccess:true}
				description = "Admin Profile\n"
				ModulePermissions
				{
					Bed_Request_Form
					{
						enabled= Create,Tab 
						allFieldsVisible= true 
					}
					Bed_Request
					{
						enabled= Viewall,Modifyall,Import,Export 
						allFieldsVisible= true 
						ReportPermissions
						{
							All_Bed_Requests={"View","Edit","Delete"}
							Bed_Requests_By_Status={"View","Edit"}
							Bed_Requests_by_Criticality={"View","Edit"}
							My_Triages={"View","Edit"}
							Untriaged_Requests={"View","Edit"}
						}
					}
					Hospitals
					{
						enabled= Create,Viewall,Modifyall,Import,Export,Tab 
						allFieldsVisible= true 
						ReportPermissions
						{
							Hospital_View={"View","Edit","Delete"}
							All_Hospitals={"View","Edit","Delete"}
						}
					}
					Triage_Team
					{
						enabled= Create,Viewall,Modifyall,Import,Export,Tab 
						allFieldsVisible= true 
						ReportPermissions
						{
							All_Triage_Teams={"View","Edit","Delete"}
						}
					}
					NGOs
					{
						enabled= Create,Viewall,Modifyall,Import,Export,Tab 
						allFieldsVisible= true 
						ReportPermissions
						{
							NGOs_Report={"View","Edit","Delete"}
						}
					}
					Admin
					{
						enabled= Create,Viewall,Import,Export,Tab 
						allFieldsVisible= true 
						ReportPermissions
						{
							Admin_Report={"View"}
						}
					}
					Volunteers
					{
						enabled= Create,Viewall,Modifyall,Import,Export,Tab 
						allFieldsVisible= true 
						ReportPermissions
						{
							All_Volunteers={"View","Edit","Delete"}
						}
					}
					Dashboard
					{
						enabled = tab
					}
					Help
					{
						enabled = tab
					}
				}
			}
			roles
			{
				"CEO"
				{
					description = "User belonging to this role can access data of all other users."
				}
			}
	}

	customize
	{
		
		layout = "tab"
		color = "black"
		base theme = "professional"
		new theme = 9
		new theme color = 5
		icons = true
    	icon type = 1
    	icon name = "zc-ab-medical5"
    	icon theme = "green"
		icons style = solid
	}

	
}